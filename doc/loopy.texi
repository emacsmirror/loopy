\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename loopy.info
@settitle Loopy: A Looping and Iteration Macro
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@dircategory Emacs
@direntry
* Loopy: (loopy).       A looping and iteration macro.
@end direntry

@finalout
@titlepage
@title Loopy: A Looping and Iteration Macro
@author Earl Hyatt
@end titlepage

@contents

@ifnottex
@node Top
@top Loopy: A Looping and Iteration Macro

@code{loopy} is a macro meant for iterating and looping.  It is similar in usage to
@code{cl-loop} (@ref{Loop Facility,,,cl,}) but uses symbolic expressions rather than
keywords.

For most use cases, @code{loopy} should a nice substitute for @code{cl-loop} and
complementary to the features provided by the @samp{seq} (@ref{Sequence Functions,,,elisp,})
and @samp{cl-lib} (@ref{Top,,,cl,}) libraries and Emacs's regular looping and mapping features.

@end ifnottex

@menu
* Introduction::                 A short overview.
* Basic Concepts::               Basic information about `loopy' and its loops.
* Special Macro Arguments::      Creating the environment of the loop.
* Loop Commands::                The main features of `loopy'.
* Special Variables::
* The @code{loopy-iter} Macro::  Embedding loop commands in arbitrary code.
* Using Flags::                  Using flags to change behavior.
* Custom Aliases::               How to add one's own aliases.
* Custom Commands::              Extending `loopy' with personal commands.
* Comparing to @code{cl-loop}::  Why `loopy' instead of `cl-loop'.
* Translating @samp{cl-loop}::   Converting `cl-loop' to `loopy', and vice versa.
* Real-World Examples::          Extra example of how one could use `loopy'.
* Macro Argument and Loop Command Index::
* Variable Index::
* Concept Index::

@detailmenu
--- The Detailed Node Listing ---

Loop Commands

* Generic Evaluation::           Setting variables, evaluating expressions, etc.
* Iteration::                    Iterating through sequences, etc.
* Accumulation::                 Accumulating values into new sequences, aggregating values, etc.
* Boolean::                      Testing whether a condition holds true.
* Control Flow::                 When to run loop commands.
* Sub-loops::                    Running a loop within a loop.

Control Flow

* Conditionals::                 Choosing if commands should run.
* Skipping Cycles::              Immediately beginning the next iteration.
* Early Exit::                   Leaving the loop early, with or without returning values.

Custom Commands

* Background Info::              The internals of `loopy'.
* Hello World::                  A minimal working example.
* An @code{always} Command::     Adding a feature from `cl-loop'.
* Finding More Examples::

Translating @samp{cl-loop}

* For Clauses::
* Iteration Clauses::
* Accumulation Clauses::
* Other Clauses::

@end detailmenu
@end menu

@node Introduction
@chapter Introduction

The @code{loopy} macro is used to generate code for a loop, similar to @code{cl-loop}.
Unlike @code{cl-loop}, @code{loopy} uses symbolic expressions instead of ``clauses''.

@lisp
;; A simple usage of `cl-loop':
(cl-loop for i from 1 to 10
         if (cl-evenp i) collect i into evens
         else collect i into odds
         end ; This `end' keyword is optional here.
         finally return (list odds evens))

;; How it could be done using `loopy':
(loopy (list i (number-sequence 1 10))
       (if (cl-evenp i)
           (collect evens i)
         (collect odds i))
       (finally-return odds evens))
@end lisp

@code{loopy} supports destructuring for iteration commands like @samp{list} and
accumulation commands like @samp{sum} or @samp{collect}.

@lisp
;; Summing the nth elements of arrays:
;; => (8 10 12 14 16 18)
(loopy (list (list-elem1 list-elem2)
             '(([1 2 3] [4 5 6])
               ([7 8 9] [10 11 12])))
       (sum [sum1 sum2 sum3] list-elem1)
       (sum [sum4 sum5 sum6] list-elem2))

;; Or, more simply:
;; => (8 10 12 14 16 18)
(loopy (list list-elem '(([1 2 3] [4 5 6])
                         ([7 8 9] [10 11 12])))
       (sum ([sum1 sum2 sum3] [sum4 sum5 sum6])
            list-elem))

;; Separate the elements of sub-list:
;; => ((1 3) (2 4))
(loopy (list i '((1 2) (3 4)))
       (collect (elem1 elem2) i))
@end lisp

The @code{loopy} macro is configurable and extensible.  In addition to writing one's
own ``loop commands'' (such as @samp{list} in the example below), by using ``flags'',
one can choose whether to instead use @code{pcase-let}, @code{seq-let}, or even the Dash
library for destructuring.

@lisp
;; Use Seq.el to destructure an array:
;; => ((1 4) ([2 3] [5 6]))
(loopy (flag seq)
       (list elem '([1 2 3] [4 5 6]))
       (collect [i &rest j] elem))
@end lisp

Variables like @samp{elem}, @samp{i}, and @samp{j} in the example above are automatically
@code{let}-bound so as to not affect code outside of the loop.

@code{loopy} has arguments for binding (or not binding) variables, executing code
before/after the loop, executing code only if the loop completes, and for
setting the macro's return value (default @code{nil}).  This is in addition to the
looping features themselves.

All of this makes @code{loopy} a useful and convenient choice for looping and
iteration.

That being said, Loopy is not yet feature complete.  Please request features
or report problems in this project’s @uref{https://github.com/okamsn/loopy/issues, issues tracker}.  While most cases are
covered, full feature parity with some of the more niche uses of @samp{cl-loop} is
still being worked on.

@node Basic Concepts
@chapter Basic Concepts

Except for an optional loop name, all arguments of the @code{loopy} macro are
symbolic expressions that create a loop, assigns variables in the lexical
environment that surrounds the loop, adds code that runs before/after the
loop, and sets the ultimate return value of the macro.

For convenience and clarity, symbolic expressions that generate code in the
loop body are called ``loop commands'' (@ref{Loop Commands}).  Symbolic
expressions that generate code around the loop are called ``special macro
arguments'' or just ``macro arguments'' as opposed to ``loop commands''
(@ref{Special Macro Arguments}).

``Loop commands'' are the main feature of the @code{loopy} macro, such as the @samp{list}
in @samp{(list i '(1 2 3))}.  A command inserts code into the loop body, but can
also perform additional setup like initializing variables.  Many commands set
a condition for ending the loop.

The loop ends when any condition required by a loop command evaluates to
false.  If no conditions are needed, the loop runs infinitely until a @samp{return}
or @samp{return-from} command is reached (@ref{Early Exit, , Exiting the Loop Early}).

Except when using accumulating loop commands (@ref{Accumulation, , Accumulation Commands}), return
values must be stated explicitly, either as an early return in the loop body
via the @samp{return} or @samp{return-from} commands, or as part of the @samp{finally-return}
macro argument.  @samp{nil} is returned by default.

The macro is configurable.  One can add custom commands (@ref{Custom Commands}), add
custom command aliases (@ref{Custom Aliases}), and specify macro options for a
particular loop (@ref{Using Flags}).  Each of these ideas is explained in detail
later in this document.

@node Special Macro Arguments
@chapter Special Macro Arguments

@cindex special macro argument
There are 7 special macro arguments. One, an unquoted symbol, is taken as the
loop's name. The others, listed below, are symbolic expressions that begin
with a keyword or one of their aliases. You do not need to use all of them.

If a macro argument does not match one of these special 7, @code{loopy} will
attempt to interpret it as a loop command, and throw an error if that fails.

These special macro arguments are always processed before loop commands,
regardless of the order of the arguments passed to @code{loopy}.  As they are not
loop commands, they cannot occur in sub-loops (@ref{Sub-loops}).

@findex with, let*
@table @asis
@item @samp{with}, @samp{let*}, @samp{init}
Declare variables before the loop.  This can also
be used to initialize variables referenced by loop commands.

@lisp
(loopy (with (a 1) (b 2)) ...)
(loopy (let* (a 1) (b 2)) ...)

;; => 16
(loopy (with (my-sum 10))
       (list i '(1 2 3))
       (sum my-sum i)
       (finally-return my-sum))
@end lisp
@end table

@findex without, no-init
@table @asis
@item @samp{without}, @samp{no-with}, @samp{no-init}
Variables that @code{loopy} should not try to
initialize.  @code{loopy} tries to initialize all the variables it uses in a
@code{let}-like form, but that isn’t always desired.

@lisp
(let ((a 5))
  ;; Without `without', `loopy' would try to initialize `a' to nil, which would
  ;; overwrite the value of 5 above.
  (loopy (without a)
         (while (not (zerop a)))
         (expr a (1- a)))

  (loopy (no-init a)
         (while (not (zerop a)))
         (expr a (1- a))))
@end lisp
@end table

@findex before-do, before
@table @asis
@item @samp{before-do}, @samp{before}, @samp{initially-do}, @samp{initially}
Run Lisp expressions
before the loop starts.

@lisp
(loopy (before-do (message "1: before loop")
                  (message "2: before loop"))
       ...)

(loopy (before (message "1: before loop")
               (message "2: before loop"))
       ...)

(loopy (initially-do (message "1: initially loop")
                     (message "2: initially loop"))
       ...)

(loopy (initially (message "1: initially loop")
                  (message "2: initially loop"))
       ...)
@end lisp
@end table

@findex after-do, after, else-do, else
@table @asis
@item @samp{after-do}, @samp{after}, @samp{else-do}, @samp{else}
Run Lisp expressions after the
loop successfully completes.  This is similar to Python’s @code{else} statement
after a @code{for} or @code{while} loop.

@lisp
(loopy (list i '(2 4 6 8))
       (when (cl-oddp i)
         (do (message "Odd number found."))
         (leave))
       (after-do (message "No odd number found.")))

(loopy (list i '(2 4 6 8))
       (when (cl-oddp i)
         (do (message "Odd number found."))
         (leave))
       (after (message "No odd number found.")))

(loopy (list i '(2 4 6 8))
       (when (cl-oddp i)
         (do (message "Odd number found."))
         (leave))
       (else-do (message "No odd number found.")))

(loopy (list i '(2 4 6 8))
       (when (cl-oddp i)
         (do (message "Odd number found."))
         (leave))
       (else (message "No odd number found.")))
@end lisp
@end table

@findex finally-do, finally
@table @asis
@item @samp{finally-do}, @samp{finally}
Always run Lisp expressions after the loop
exits.

@lisp
(loopy (list i '(1 2 3))
       (when (cl-oddp i) (break))
       (after-do (message "This not messaged."))
       (finally-do (message "This always messaged.")))

(loopy (list i '(1 2 3))
       (when (cl-oddp i) (break))
       (after-do (message "This not messaged."))
       (finally (message "This always messaged.")))
@end lisp
@end table

@findex finally-return
@table @asis
@item @samp{finally-return}
Return a value, regardless of how the loop completes.
Accumulation commands have an implicit return value, but this argument
overrides them.  Specifying multiple return values is the same as returning
a list of those values.  This is convenient when used with @code{seq-let},
@code{pcase-let}, @code{cl-destructuring-bind}, and the like.

@lisp
(loopy (list i '(1 2 3))
       (when (cl-oddp i)
         (return "This return value is over-ridden."))
       (finally-return "This string always returned."))

;; => (1 2 3)
(loopy (repeat 0)
       (finally-return 1 2 3))
@end lisp
@end table

@findex flag, flags
@table @asis
@item @samp{flag}, @samp{flags}
Options that change the behavior of @code{loopy}
([BROKEN LINK: *Changing the Macro's Behavior with Flags]).

@lisp
(loopy (flag dash)
       (list (whole &as a b) '((1 2) (3 4)))
       ...)

(loopy (flags dash)
       (list (whole &as a b) '((1 2) (3 4)))
       ...)
@end lisp
@end table


As stated above, all other expressions will be considered loop commands
(@ref{Loop Commands}).


@quotation Note
For convenience, the @code{while}-loop that @code{loopy} creates is wrapped by a
@code{cl-block}.  Naming the loop names this block, which is created @emph{after}
initializing variables.

The two special macro arguments @samp{before-do} and @samp{after-do} (and their aliases)
also occur within this @code{cl-block}, before and after the loop, respectively.
This has 2 consequences:

@enumerate
@item
Using @code{cl-return} in @samp{before-do} will prevent the both loop and @samp{after-do}
code from running.

@item
Using @code{cl-return} or an early exit command (@ref{Early Exit}) in the loop will
prevent the @samp{after-do} code from running.  For this reason, @samp{after-do} is
run if and only if the loop completes successfully, hence the alias
@samp{else-do} and the similarity to Python's @code{else} statement for loops.
@end enumerate

These three sections (@samp{before-do}, @samp{after-do}, and the @code{while}-loop itself)
are the only structures that occur within the @code{cl-block}.  Using @code{cl-return}
in @samp{before-do}, for example, will not stop code in @samp{finally-do} from running
or values listed in @samp{finally-return} from being returned.

@end quotation

@node Loop Commands
@chapter Loop Commands

@cindex loop command
If a macro argument does not match one of the previously listed special macro
arguments (@ref{Special Macro Arguments}), @code{loopy} will attempt to treat it as a
loop command.  Loop commands are only valid as a top-level argument to the
macro, or inside another loop command.

Therefore, these macro calls are valid:

@lisp
(loopy (list i '(1 2 3))
       (collect coll i)
       ;; Special macro argument:
       (finally-return coll))

;; Implicit accumulation variable and implicit return value:
(loopy (list i '(1 2 3))
       (collect i))
@end lisp

and this is not:

@lisp
(loopy (with (list i '(1 2 3)))
       (finally-return (collect coll i)))
@end lisp

Trying to use loop commands where they don't belong will result in errors
when the code is evaluated.

You should keep in mind that commands are evaluated in order.  This means that
attempting to do something like the below example might not do what you
expect, as @samp{i} is assigned a value from the list after collecting @samp{i} into
@samp{coll}.

@float Listing,org2b24ef2
@lisp
;; => (nil 1 2)
(loopy (collect coll i)
       (list i '(1 2 3))
       (finally-return coll))
@end lisp
@caption{An example of how loop commands are evaluated in order.}
@end float

For convenience and understanding, the same command might have multiple names,
called @dfn{aliases}.  For example, the command @samp{expr} has an alias
@samp{set}, because @samp{expr} is used to set a variable to the value of an expression.
You can add custom aliases using the function @code{loopy-defalias}, which modifies
the user option @code{loopy-custom-command-aliases} (@ref{Custom Aliases}).

Some commands take optional arguments.  For example, the command @samp{list} can
take a function as an optional argument, which affects how that iterates
through the elements in the list.

For simplicity, the commands are described using the following notation:

@itemize
@item
If a command has multiple names, the names are separated by a vertical
bar, such as in @samp{expr|set}.
@item
@samp{VAR} is an unquoted symbol that will be used as a variable name, such as
@samp{i} in @samp{(list i my-list)}.
@item
@samp{FUNC} is a Lisp function name, such as @samp{my-func}, @samp{#'my-func} or
@samp{'my-func}.
@item
@samp{NAME} is an unquoted name of a loop (or, more accurately, of a
@samp{cl-block}).
@item
@samp{EXPR} is a single Lisp expression, such as @samp{(+ 1 2)}, @samp{'(1 2 3)},
@samp{my-var}, or @samp{(some-function my-var)}.  @samp{EXPRS} means multiple expressions.
Really, we are concerned with the value of the expression, not the
expression itself.
@item
@samp{CMD} is a loop command, as opposed to a normal Lisp expression.
@samp{(list i '(1 2 3))}, @samp{(repeat 5)}, and @samp{(return-from outer-loop 7)}
are examples of loop commands.  @samp{CMDS} means multiple commands.
@item
Optional arguments are surround by brackets.  @samp{[EXPR]} is an optional
expression, and @samp{[CMD]} is an optional command.  By extension,
@samp{[EXPRS]} is equivalent to @samp{[EXPR [EXPR [...]]]}, and @samp{[CMDS]} to
@samp{[CMD [CMD [...]]]}.
@item
Optional keyword arguments are shown as @samp{&key key1 key2 ...}, where @samp{key1},
@samp{key2}, and so on are the literal keywords.  Just like in functions,
keywords must be prefixed by a colon (``:'').  For example, the iteration
command @samp{nums} has a keyword argument @samp{by}, which can be given a value using
@samp{:by SOME-EXPRESSION}.
@end itemize


Generally, @samp{VAR} is initialized to @code{nil}, but not always.  This document
tries to note when that is not the case.

@cindex variable destructuring
For convenience, @samp{VAR} can be a sequence, either a list or a vector (as a
stand-in for an array), of symbols instead of a single symbol.  This tells
the command to “de-structure” the value of @samp{EXPR}, similar to the functions
@code{seq-let}, @code{cl-destructuring-bind}, and @code{pcase-let}.  This sequence of
symbols can be shorter than the destructured sequence, @emph{but not longer}.  If
shorter, the unassigned elements of the list are simply ignored.  To assign
the final @code{cdr} of a destructured list, use dotted notation.

@float Listing,org355505f
@lisp
;; => [(9 10 11 4) (9 10 11 8)]
(loopy (with (my-array [(1 2 3 4) (5 6 7 8)]))
       (array-ref (i j k) my-array)
       ;; NOTE: The remaining elements are ignored.
       (do (setf i 9)
           (setf j 10)
           (setf k 11))
       (finally-return my-array))

;; => ([9 10 11 4] [9 10 11 8])
(loopy (with (my-list '([1 2 3 4 ] [5 6 7 8])))
       (list-ref [i j k] my-list)
       ;; NOTE: The remaining elements are ignored.
       (do (setf i 9)
           (setf j 10)
           (setf k 11))
       (finally-return my-list))

;; => (1 (2 3))
(loopy (list (i . j) '((1 2 3)))
       (finally-return i j))

;; => ((1 22))
(loopy (with (my-list '((1 2 3))))
       (list-ref (_ . j) my-list)
       (do (setf j '(22)))
       (finally-return my-list))

;; => [(1 22)]
(loopy (with (my-array [(1 2 3)]))
       (array-ref (_ . j) my-array)
       (do (setf j '(22)))
       (finally-return my-array))
@end lisp
@caption{Several examples of destructuring.}
@end float

Most commands that assign variables (even the @samp{-ref} commands, which use
@code{setf}-able places instead of actual variables) can use destructuring, but
not all kinds of destructuring make sense in all situations.

@menu
* Generic Evaluation::           Setting variables, evaluating expressions, etc.
* Iteration::                    Iterating through sequences, etc.
* Accumulation::                 Accumulating values into new sequences, aggregating values, etc.
* Boolean::                      Testing whether a condition holds true.
* Control Flow::                 When to run loop commands.
* Sub-loops::                    Running a loop within a loop.
@end menu

@node Generic Evaluation
@section Generic Evaluation

@findex do
@table @asis
@item @samp{(do EXPRS)}
Evaluate multiple Lisp expressions, like a @samp{progn}.

You cannot include arbitrary code in the loop body.  Trying to do so will
result in errors, as the macro will attempt to interpret such code as a
command.

@lisp
(loopy (list i '(1 2 3))
       (do (message "%d" i)))
@end lisp
@end table

@findex expr, exprs, set
@table @asis
@item @samp{(expr|exprs|set VAR [EXPRS] [:init INIT])}
Bind @samp{VAR} to each @samp{EXPR} in
order.  Once the last @samp{EXPR} is reached, it is used repeatedly for the rest
of the loop.  With no @samp{EXPR}, @samp{VAR} is repeatedly bound to @samp{nil}.

If @samp{INIT} is provided, use that as the initial value of @samp{VAR}.  This could
also be achieved by specifying a value using the @samp{with} special macro
argument.  When destructuring, each variable is initialized to @samp{INIT}, not
a destructured part of @samp{INIT}.

@quotation Note
@samp{expr} does @emph{not} behave the same as @code{setq} in all situations.

While @samp{expr} can take multiple arguments, it only assigns the value of one
expression to one variable during each iteration of the loop (unless using
destructuring).  It cannot take pairs of variables and values in the same
way that @code{setq} does.

Furthermore, variables assigned by @samp{expr} (and other commands) are by
default @code{let}-bound around the loop and generally initialized to @code{nil}.
This means that doing @samp{(expr VAR EXPR)} will not, by default, affect
variables outside of the loop in the same way that using @samp{(do (setq VAR
     EXPR))} would.

@end quotation

@lisp
;; => '(1 2 3 3 3)
(loopy (repeat 5)
       (expr i 1 2 3)
       (collect coll i)
       (finally-return coll))

;; => '(0 1 2 3 4)
(loopy (repeat 5)
       (expr i 0 (1+ i))
       (collect coll i)
       (finally-return coll))

;; Note that `i' is initialized to 0, and set to 1 in
;; the middle of the first cycle of the loop.
;;
;; => ((0 1 2) (1 2 3))
(loopy (repeat 3)
       (collect befores i)
       (expr i 1 (1+ i) :init 0)
       (collect afters i)
       (finally-return befores afters))

;; Note that using `with' has a similar effect.
;; => (0 1 2)
(loopy (with (i 0))
       (repeat 3)
       (collect i)
       (expr i 1 (1+ i)))
@end lisp
@end table

@findex group
@table @asis
@item @samp{(group [CMDS])}
Evaluate multiple loop commands, as if in a @samp{progn}.
This is similar to @samp{do}, but runs commands instead of normal Lisp
expressions.  Currently, this command is only useful when used with the
@samp{if} command.
@end table

@findex prev-expr, prev
@table @asis
@item @samp{(prev-expr|prev VAR VAL &key init back)}
Bind @samp{VAR} to a value @samp{VAL}
from a previous cycle in the loop.  @samp{VAR} is initialized to @samp{INIT} or nil.
With @samp{BACK}, use the value from that many cycles previous.

As in @samp{expr}, when using destructuring, each variable is initialized to
@samp{INIT}, not a destructured part of @samp{INIT}.

@lisp
;; => (nil 1 2 3 4)
(loopy (list i '(1 2 3 4 5))
       (prev-expr j i)
       (collect j))

;; (nil nil nil 1 2)
(loopy (list i '(1 2 3 4 5))
       (prev-expr j i :back 3)
       (collect j))

;; => ((7 7 1 3) (7 7 2 4))
(loopy (list i '((1 2) (3 4) (5 6) (7 8)))
       (prev-expr (a b) i :back 2 :init 7)
       (collect c1 a)
       (collect c2 b)
       (finally-return c1 c2))

;; NOTE: `prev-expr' keeps track of the previous value of `i',
;;       even when `j' isn't updated.
;;
;; => (first-val first-val 2 2 4 4 6 6 8 8)
(loopy (numbers i 1 10)
       (when (cl-oddp i)
         (prev-expr j i :init 'first-val))
       (collect j))
@end lisp
@end table

@node Iteration
@section Iteration

Iteration commands bind local variables and determine when the loop ends.
If no command sets that condition, then the loop runs forever.

Iteration commands must occur in the top level of the @code{loopy} form or in a
@samp{sub-loop} command.  Trying to do something like the below will signal an
error.

@lisp
(loopy (list i '(1 2 3 4 5))
       (when (cl-evenp i)
         ;; Can't use `list' in a `when'.
         ;; Will signal an error.
         (list j '(6 7 8 9 10))
         (collect j)))
@end lisp

The @samp{-ref} (as in “reference”) commands create @code{setf}-able places instead of
true variables.  Like other commands, they too can use destructuring, in
which case the variables in the sequence @samp{VAR} are also @code{setf}-able places
instead of true variables.

@quotation Note
In @code{loopy}, iteration commands are named after what they iterate through.
For example, @samp{array} and @samp{list} iterate through the elements of arrays and
lists, respectively.  For the convenience of familiarity, these commands also
have aliases based on their equivalent @samp{for}-clause from @code{cl-loop}.

To translate @samp{for VAR in LIST} from @code{cl-loop} to @code{loopy}, one can use either
@samp{(list VAR LIST)} or @samp{(in VAR LIST)}.  This can be helpful when using
@code{loopy-iter} (@ref{The @code{loopy-iter} Macro}), in which case you could write any of
@samp{(for list VAR LIST)}, @samp{(for in VAR LIST)}, or @samp{(in VAR LIST)}, depending on
whether you have enabled the @samp{lax-naming} flag.

@end quotation

The available iteration commands are:

@findex array, string, across
@table @asis
@item @samp{(array|string|across VAR EXPR)}
Loop through the elements of the array
@samp{EXPR}.  In Emacs Lisp, strings are arrays whose elements are characters.

@lisp
(loopy (array i [1 2 3])
       (do (message "%d" i)))

;; Collects the integer values representing each character.
;; => (97 98 99)
(loopy (string c "abc")
       (collect c))
@end lisp
@end table

@findex array-ref, arrayf, string-ref, stringf, across-ref
@table @asis
@item @samp{(array-ref|arrayf|string-ref|stringf|across-ref VAR EXPR)}
Loop through
the elements of the array @samp{EXPR}, binding @samp{VAR} as a @code{setf}-able place.

@lisp
(loopy (with (my-str "cat"))
       (array-ref i my-str)
       (do (setf i ?a))
       (finally-return my-str)) ; => "aaa"
@end lisp
@end table

@findex cons, conses, on
@table @asis
@item @samp{(cons|conses|on VAR EXPR [FUNC])}
Loop through the cons cells of @samp{EXPR}.
Optionally, find the cons cells via @samp{FUNC} instead of @samp{cdr}.

To avoid unneeded variables, when not destructuring, @samp{VAR} is initialized
to @samp{EXPR} instead of @code{nil}.

@lisp
(loopy (cons i '(1 2 3))
       (collect coll i)
       (finally-return coll)) ; => ((1 2 3) (2 3) (3))
@end lisp
@end table

@findex list, in, each
@table @asis
@item @samp{(list|in|each VAR EXPR [FUNC])}
Loop through each element of the list
@samp{EXPR}.  Optionally, update the list by @samp{FUNC} instead of @samp{cdr}.

@lisp
(loopy (list i (number-sequence 1 10 3)) ; Inclusive, so '(1 4 7 10).
       (do (message "%d" i)))
@end lisp
@end table

@findex list-ref, listf, in-ref
@table @asis
@item @samp{(list-ref|listf|in-ref VAR EXPR [FUNC])}
Loop through the elements of
the list @samp{EXPR}, binding @samp{VAR} as a @code{setf}-able place.  Optionally, update
the list by @samp{FUNC} instead of @samp{cdr}.

@lisp
(loopy (with (my-list '(1 2 3)))
       (list-ref i my-list)
       (do (setf i 7))
       (finally-return my-list)) ; Returns '(7 7 7).
@end lisp
@end table

@findex map
@table @asis
@item @samp{(map VAR EXPR)}
Iterate through the key-value pairs of @samp{EXPR}, using
the @samp{map.el} library.  This library generalizes working with association
lists (``alists''), property lists (``plists''), hash-tables, and vectors.

In each undotted pair assigned to @samp{VAR}, the first element is the key and
the second element is the value.  For vectors, the key is the index.  You
should not rely on the order in which the key-value pairs are found.

These pairs are created before the loop begins.  In other words, the map
@samp{EXPR} is not processed progressively, but all at once.  Therefore, this
command can have a noticeable start-up cost when working with very large
maps.

@lisp
;; NOTE: `pair' is not dotted.
;; => ((a 1) (b 2))
(loopy (map pair '((a . 1) (b . 2)))
       (collect pair))

;; => ((a b) (1 2))
(loopy (map (key value) '((a . 1) (b . 2)))
       (collect keys key)
       (collect values value))

;; => ((:a :b) (1 2))
(loopy (map (key value) '(:a  1 :b 2))
       (collect keys key)
       (collect values value))

;; NOTE: For vectors, the keys are indices.
;; => ((0 1) (1 2))
(loopy (map (key value) [1 2])
       (collect keys key)
       (collect values value))

;; => ((a b) (1 2))
(let ((my-table (make-hash-table)))
  (puthash 'a 1 my-table)
  (puthash 'b 2 my-table)

  (loopy (map (key value) my-table)
         (collect keys key)
         (collect values value)))
@end lisp
@end table

@findex num, nums, number, numbers
@table @asis
@item @samp{(nums|num|number|numbers VAR START [END] &key by down)}
Increment @samp{VAR}
from @samp{START} through @samp{END}.  @samp{by} is a positive value used to adjust
@samp{VAR}.  @samp{down} determines whether @samp{VAR} is incremented or decremented.

The values of @samp{START}, @samp{END}, and @samp{by} are all computed during
initialization.  They do not change during the loop.

@samp{VAR} is initialized to @samp{START}.  The loop ends when @samp{VAR} is either
greater or less than @samp{END} (if given), depending on the value of @samp{down}.

Without @samp{by}, the default step is 1.  Without @samp{down}, @samp{VAR} increases.

This command does not support destructuring.

@lisp
;; => (1 2 3 4 5)
(loopy (nums i 1 5)
       (collect i))

;; => (1 3 5)
(loopy (nums i 1 5 :by 2)
       (collect i))

;; => (5 3 1)
(loopy (nums i 5 1 :by 2 :down t)
       (collect i))

;; => (0 7 14)
(loopy (repeat 3)
       ;; We can use `repeat' to avoid an infinite loop.
       (nums i 0 :by 7)
       (collect i))

;; => (0 -7 -14 -21 -28 -35 -42)
(loopy (repeat 7)
       ;; We can use `repeat' to avoid an infinite loop.
       (nums i 0 :by 7 :down t)
       (collect i))
@end lisp
@end table

@table @asis
@item @samp{(nums-down|numsdown|numbers-down VAR START [END] &key by)}
Equivalent
to @samp{(nums VAR START [END] :down t &key by)}.  This command exists only for
convenience.

@lisp
;; => (10 8 6 4 2)
(loopy (nums-down i 10 1 :by 2)
       (collect i))
@end lisp
@end table

@table @asis
@item @samp{(nums-up|numsup|numbers-up VAR START [END] &key by)}
Equivalent to
@samp{(nums VAR START [END] &key by)}.  This command exists only for
convenience.

@lisp
;; => (1 3 5 7 9)
(loopy (nums-up i 1 10 :by 2)
       (collect i))
@end lisp
@end table

@findex repeat
@table @asis
@item @samp{(repeat [VAR] EXPR)}
Add a condition that the loop should stop after
@samp{EXPR} iterations.  If specified, @samp{VAR} starts at 0, and is incremented by
1 at the end of the loop.

@lisp
(loopy (repeat 3)
       (do (message "Messaged three times.")))

(loopy (repeat i 3)
       (do (message "%d" i)))
@end lisp
@end table

@findex seq, sequence, elements
@table @asis
@item @samp{(seq|sequence|elements VAR EXPR)}
Loop through the sequence @samp{EXPR},
binding @samp{VAR} to the elements of the sequence.

@lisp
(loopy (seq i [1 2 3])
       (collect coll i)
       (finally-return coll)) ; => (1 2 3)
@end lisp
@end table

@findex seq-index, seqi, array-index, arrayi, list-index, listi, string-index, stringi
@table @asis
@item @samp{(seq-index|array-index|list-index|string-index VAR VAL)}
Iterate
through the indices of @samp{VAL}.  The loop ends when @samp{VAR} is equal to the
length of @samp{VAL}.

For convenience, this command also has the aliases @samp{seqi}, @samp{arrayi},
@samp{listi}, and @samp{stringi}, analogous to the command aliases @samp{seqf}, @samp{arrayf},
@samp{listf}, and @samp{stringf}.

This command does not support destructuring.

@lisp
;; => (0 1 2)
(loopy (seq-index i [1 2 3])
       (collect i))

;; => (0 1 2)
(loopy (array-index i "abc")
       (collect i))

;; => (0 1 2)
(loopy (list-index i '(1 2 3))
       (collect i))
@end lisp
@end table

@findex seq-ref, seqf, sequence-ref, sequencef, elements-ref
@table @asis
@item @samp{(seq-ref|seqf|sequence-ref|sequencef|elements-ref VAR EXPR)}
Loop
through the elements of the sequence @samp{EXPR}, binding @samp{VAR} as a @code{setf}-able
place.

@lisp
(loopy (with (my-seq '(1 2 3 4)))
       (seq-ref i my-seq)
       (do (setf i 7))
       (finally-return my-seq)) ; => '(7 7 7 7)
@end lisp
@end table

@node Accumulation
@section Accumulation

Accumulation commands are used to accumulate or aggregate values into a
variable.  For example, creating a list of values or summing the elements in
a sequence can both be done using accumulation commands.

If needed, you can refer to the same accumulation variable in multiple
accumulation commands, such as in the following example.

@lisp
(loopy (list i '(1 2 3))
       (collect coll i)
       (collect coll (+ i 5))
       (finally-return coll)) ; => (1 6 2 7 3 8)
@end lisp

@quotation Note
Like with other loop commands, variables created by accumulation commands
(such as @samp{coll} in the above example) are initialized to @code{nil} unless
stated otherwise.

@end quotation

@cindex accumulation destructuring
Like iteration loop commands, accumulation commands can also use
destructuring, in which case the destructured values are accumulated instead
of the ``whole'' value.

@lisp
;; => ((1 4) (2 5) (3 6))
(loopy (list elem '((1 2 3) (4 5 6)))
       (collect (coll1 coll2 coll3) elem)
       (finally-return coll1 coll2 coll3))

;; => (5 7 9)
(loopy (list elem '((1 2 3) (4 5 6)))
       (sum (sum1 sum2 sum3) elem)
       (finally-return sum1 sum2 sum3))

;; Returns the same values as above.
(loopy (list elem '((1 2 3) (4 5 6)))
       (expr sum1 (cl-first elem)  (+ sum1 (cl-first elem)))
       (expr sum2 (cl-second elem) (+ sum2 (cl-second elem)))
       (expr sum3 (cl-third elem)  (+ sum3 (cl-third elem)))
       (finally-return sum1 sum2 sum3))
@end lisp

@cindex implied/implicit return values
Using an accumulation command implies a return value for the macro, which you
can override using the @samp{return} and @samp{return-from} loop commands or the
@samp{finally-return} macro argument.  If there are multiple accumulation
variables (including those created via destructuring), then the implied
return value of the macro is a list of those accumulated values in the order
that their respective command occurs in the loop body.  In the example below,
note that @code{my-collection} is the first element in the list of values returned
by the macro, even though the collection happens @emph{after} the first summation.
This is because the macro sees the @samp{collect} command before it sees the @samp{sum}
command.

@lisp
;; => (((4 5 6)) 5 7 9), for (`my-collection', `sum1', `sum2', `sum3')
(loopy (list elem '((1 2 3) (4 5 6)))
       (when (equal elem '(4 5 6))
         (collect my-collection elem))
       (sum (my-sum1 my-sum2 my-sum3) elem))
@end lisp

@cindex implied/implicit accumulation results
@vindex loopy-result
Like in @code{cl-loop}, you do not need to supply a variable name to accumulation
commands.  If no accumulation variable is given, accumulation commands will
use the variable @code{loopy-result}.  This variable is accessible in the
@samp{after-do}, @samp{finally-do}, and @samp{finally-return} special macro arguments.  As a
consequence of how the macro expands, changing the value of @code{loopy-result} in
the @samp{after-do} (but not @samp{finally-do}) macro argument changes the implied
return value of the loop.

@lisp
;; => (1 2 3)
(cl-assert (equal (loopy (list i '(1 2 3))
                         (collect i)
                         (after-do (cl-return loopy-result)))

                  (loopy (list i '(1 2 3))
                         (collect i)
                         (finally-return loopy-result))))

;; => (0 1 2 3)
(cl-assert (equal (loopy (list i '(1 2 3))
                         (collect i)
                         (else-do (push 0 loopy-result)
                                  (cl-return loopy-result)))
                  (loopy (list i '(1 2 3))
                         (collect i)
                         (finally-do (push 0 loopy-result))
                         (finally-return loopy-result))))
@end lisp

Like in @code{cl-loop}, all accumulation commands using implied variables will
accumulate into the same implied variable (that is, into @code{loopy-result}).
You should make sure that such commands are compatible.  For example, you
should not try to accumulate @samp{collect} results and @samp{sum} results into
@code{loopy-result}, as trying to use a list as a number will cause an error.  If
you want to collect into separate variables, just specify a variable name
like you normally would.

@quotation Warning
You should not try to access implied accumulation results (e.g.,
@code{loopy-result}) while the loop is running.  Implied results are only required
to be correct after the loop ends (before code in @samp{else-do} is run), allowing
for more efficient code.

Furthermore, because using a @samp{return} or @samp{return-from} command overrides
implied return values, using these commands can prevent implied accumulation
results from being finalized.  Using the @samp{leave} command, which exits the
loop without returning a value, does not affect the correctness of implied
results.

@end quotation

You should prefer using accumulation with implied results whenever you don't
need to access the accumulation results during the loop.  Because @code{loopy} has
more freedom when generating implied accumulation results, using implied
results can be much faster.

As noted above, @code{loopy} will by default accumulate into the same implied
variable, @code{loopy-result}.  If you wish to have the speed of implied results
while accumulating into separate variables, you should enable the @samp{split}
flag (@ref{Using Flags, , Flags}).  This flag will make the macro split the implied
results of each accumulation command into a separate variable instead of
using @code{loopy-result}.  This can be much faster than using destructuring with
accumulation commands.

@lisp
;; Both of these example give the same result, but the latter can
;; expand into more efficient code.

;; => ((1 4) (2 5) (3 6))
(loopy (list elem '((1 2 3) (4 5 6)))
       (collect (i j k) elem))

;; => ((1 4) (2 5) (3 6))
(loopy (flag split) ; Don't implicitly accumulate into `loopy-result'.
       (list (i j k) '((1 2 3) (4 5 6)))
       (collect i)        ; Without the `split' flag,
       (collect j)        ; this would just produce
       (collect k))       ; (1 2 3 4 5 6).
@end lisp

@quotation Note
You will notice that each accumulation command has an alias of the command
name in the present participle form (the ``-ing'' form).

For example, instead of ``min'' or ``minimize'', you can use ``minning'' or
``minimizing''.  Instead of ``sum'' and ``append'', you can use ``summing'' and
``appending''.  This helps to avoid name collisions when using the @code{loopy-iter}
macro with the @samp{lax-naming} flag enabled (@ref{The @code{loopy-iter} Macro}).

@end quotation

@cindex accumulation keyword arguments
Some accumulation commands have optional keyword parameters, which are listed
in the command's definition.  To avoid repetition, the common parameters are
all described below.

@cindex accumulation keyword at
@table @asis
@item @samp{at}
Where to place a value.  One of @samp{end}, @samp{start}, or @samp{beginning}
(equivalent to @samp{start}).  If ungiven, defaults to @samp{end}.  These positions
need not be quoted.
@end table
@cindex accumulation keyword into
@table @asis
@item @samp{into}
An alternative way to specify the variable into which to
accumulate values.  One would normally just give @samp{VAR} as the first
argument of the loop command, but if you wish, you can use this keyword
argument for a more @code{cl-loop}-like syntax.

As all accumulation commands support this keyword, it is not listed in
any command definition.
@end table
@cindex accumulation keyword test
@table @asis
@item @samp{test}
A function of two arguments, usually used to test for equality.
Most tests default to @code{eql}, as in Common Lisp and the @samp{cl-lib} library.
@end table
@cindex accumulation keyword key
@table @asis
@item @samp{key}
A function of one argument, used to transform the inputs of
@samp{test}.
@end table
@cindex accumulation keyword init
@table @asis
@item @samp{init}
The initial value of @samp{VAR}.  For explicitly named variables, one
can use this argument or the @samp{with} special macro argument.  When using the
@samp{split} flag, this argument is the only way to specify a non-default
initial value.
@end table
@cindex accumulation keyword result-type
@table @asis
@item @samp{result-type}
A sequence type into which @samp{VAR} is converted @emph{after the
loop is over}.  These types need not be quoted.  For example, @samp{'vector} and
@samp{vector} are both valid ways to specify the data type vector.

This argument can be more convenient than writing out a call to @code{cl-coerce}
or @code{seq-into}.
@end table

The arguments to the @samp{test} and @samp{key} parameters can be quoted functions or
variables, just like when using @code{cl-union}, @code{cl-adjoin}, and so on.  @code{loopy}
knows how to expand efficiently for either case.

The available accumulation commands are:

@table @asis
@item @samp{(accumulate VAR EXPR FUNC &key init)}
Accumulate the result of applying
function @samp{FUNC} to @samp{EXPR} and @samp{VAR}.  @samp{EXPR} and @samp{VAR} are used as the
first and second arguments to @samp{FUNC}, respectively.

This is a generic command in case the others don't meet your needs.

@lisp
;; Call `(cons i my-accum)'
;;
;; => (2 1)
(loopy (list i '(1 2))
       (accumulate my-accum i #'cons :init nil))

;; => ((3 1) (4 2))
(loopy (list i '((1 2) (3 4)))
       (accumulate (accum1 accum2) i #'cons :init nil))
@end lisp
@end table

@findex adjoin
@table @asis
@item @samp{(adjoin|adjoining VAR EXPR &key at test key init result-type)}
Repeatedly
add @samp{EXPR} to @samp{VAR} if it is not already present in the list.

@lisp
;; Without a test, defaults to `eql' as in `cl-adjoin'.
;; => ((1 . 1) (1 . 2) (1 . 2) (2 . 3))
(loopy (list i '((1 . 1) (1 . 2) (1 . 2) (2 . 3)))
       (adjoin i))

;; Using `equal' for the test.
;; => ((1 . 1) (1 . 2) (2 . 3))
(loopy (list i '((1 . 1) (1 . 2) (1 . 2) (2 . 3)))
       (adjoin i :test #'equal))

;; Using `=' for the test and `car' for the key.  This
;; treats '(1 . 2) as equivalent to '(1 . 1), so it
;; won't be added.
;;
;; => ((1 . 1) (2 . 3))
(loopy (list i '((1 . 1) (1 . 2) (1 . 2) (2 . 3)))
       (adjoin i :test #'= :key #'car))

;; Coerced to a vector /after/ the loop ends.
;; => [1 2 3 4]
(loopy (list i '(1 2 3 3 4))
       (adjoin my-var i :result-type 'vector)
       (when (vectorp my-var)
         (return 'is-vector)))

;; => [4 3 2 1]
(loopy (list i '(1 2 3 3 4))
       (adjoin my-var i :result-type 'vector :at 'start))
@end lisp
@end table

@findex append
@table @asis
@item @samp{(append|appending VAR EXPR &key at)}
Repeatedly concatenate @samp{EXPR} to
@samp{VAR}, as if by the function @code{append}.

@lisp
;; => '(1 2 3 4 5 6)
(loopy (list i '((1 2 3) (4 5 6)))
       (append coll i)
       (finally-return coll))

;; => (4 5 6 1 2 3)
(loopy (list i '((1 2 3) (4 5 6)))
       (append coll i :at start)
       (finally-return coll))
@end lisp
@end table

@findex collect
@table @asis
@item @samp{(collect|collecting VAR EXPR &key result-type at)}
Collect the value of
@samp{EXPR} into the list @samp{VAR}.  By default, elements are added to the end of the
list.

@lisp
;; => '(1 2 3)
(loopy (list i '(1 2 3))
       (collect i))

;; => '((1 2 3) ((1) (1 2) (1 2 3)))
(loopy (list i '(1 2 3))
       ;; Collect `i' into `coll1'.
       (collect coll1 i)
       ;; Collect `coll1' into a generated variable.
       (collect coll1))

;; => [1 2 3]
(loopy (list j '(1 2 3))
       (collect j :result-type 'vector))

;; => (3 2 1)
(loopy (list j '(1 2 3))
       (collect j :at start))

;; => (1 2 3)
(loopy (list j '(1 2 3))
       (collect j :at 'end))
@end lisp
@end table

@findex concat
@table @asis
@item @samp{(concat|concating VAR EXPR &key at)}
Repeatedly @code{concat} the value of
@samp{EXPR} onto @samp{VAR}, as a string.  See the @samp{vconcat} command for
concatenating values into a vector.

Unlike when using the @samp{:result-type} keyword argument for some other
commands, @samp{VAR} is a string throughout the loop, not just after the loop
ends.

@lisp
;; => "abc"
(loopy (list i '("a" "b" "c"))
       (concat str i)
       (finally-return str))

;; => ("da" "eb" "fc")
(loopy (list j '(("a" "b" "c") ("d" "e" "f")))
       (concat (str1 str2 str3) j :at 'start)
       (finally-return str1 str2 str3))
@end lisp
@end table

@findex count
@table @asis
@item @samp{(count|counting VAR EXPR)}
Count the number of times that @samp{EXPR}
evaluates to a non-nil value.  @samp{VAR} starts at 0 and is incremented by 1
each time.

@lisp
;; => 3
(loopy (list i '(1 nil 3 nil 5))
       (count non-nil-count i)
       (finally-return non-nil-count))
@end lisp
@end table

@findex find, finding
@table @asis
@item @samp{(find|finding VAR EXPR TEST &key ON-FAILURE)}
If @samp{TEST} is
non-nil, the loop stops and @samp{EXPR} is used as a returned value.  If @samp{TEST}
is never non-nil, then @samp{ON-FAILURE} is used as a returned value, if
provided.

@samp{VAR} takes the value of @samp{EXPR} if @samp{TEST} is non-nil or @samp{ON-FAILURE} if the
loop completes successfully.  It is bound to @code{nil} during  the loop.

@lisp
;; => 3
(loopy (list i '(1 2 3))
       (finding i (> i 2)))

;; => nil
(loopy (list i '(1 2 3))
       (finding i (> i 4)))

;; => "not found"
(loopy (list i '(1 2 3))
       (finding i (> i 4) :on-failure "not found"))

;; => 2
;; Does not display message.
(loopy (list i '(1 2 3))
       (finding i (= i 2) :into found)
       (after-do (message "found: %s" found)))

;; => 2
;; Messages "found: 2" in echo area.
(loopy (list i '(1 2 3))
       (finding found i (= i 2))
       (finally-do (message "found: %s" found)))
@end lisp
@end table

@findex max, maximize
@table @asis
@item @samp{(max|maxing|maximize|maximizing VAR EXPR)}
Repeatedly set @samp{VAR} to the
greater of @samp{VAR} and the value of @samp{EXPR}.  @samp{VAR} starts at @samp{-1.0e+INF}, so
that any other value should be greater that it.

@lisp
;; => 11
(loopy (list i '(1 11 2 10 3 9 4 8 5 7 6))
       (max my-max i)
       (finally-return my-max))
@end lisp
@end table

@findex min, minimize
@table @asis
@item @samp{(min|minning|minimize|minimizing VAR EXPR)}
Repeatedly set @samp{VAR} to the
lesser of @samp{VAR} and the value of @samp{EXPR}.  @samp{VAR} starts at @samp{1.0e+INF}, so
that any other value should be less than it.

@lisp
;; => 0
(loopy (list i '(1 11 2 10 3 0 9 4 8 5 7 6))
       (min my-min i)
       (finally-return my-min))
@end lisp
@end table

@findex multiply, multiplying
@table @asis
@item @samp{(multiply|multiplying VAR EXPR)}
Repeatedly set @samp{VAR} to the product of
the values of @samp{EXPR}.  @samp{VAR} starts at 1.

@lisp
;; => 120
(loopy (list i '(1 2 3 4 5))
       (multiply 5-factorial i)
       (finally-return 5-factorial))
@end lisp
@end table

@findex nconc
@table @asis
@item @samp{(nconc|nconcing VAR EXPR &key at)}
Repeatedly concatenate the value of
@samp{EXPR} onto @samp{VAR} as if via the function @code{nconc}.

@quotation Caution
@code{nconc} is a destructive operation that modifies @samp{VAR} directly
(@ref{Rearrangement,,,elisp,}).  This is important to keep in mind when working
with literal values, such as the list @samp{'(1 2 3)}, whose modification could
apply wherever that value is used (@ref{Self-Evaluating Forms,,,elisp,}).

@end quotation

@lisp
;; => '(1 2 3 4 5 6 7 8)
(loopy (list i '((1 2 3 4) (5 6 7 8)))
       (nconc my-new-list i)
       (finally-return my-new-list))

;; => '(3 3 3 2 2 1)
(loopy (list i (list (make-list 1 1)
                     (make-list 2 2)
                     (make-list 3 3)))
       (nconc i :at start))
@end lisp
@end table

@findex nunion
@table @asis
@item @samp{(nunion|nunioning VAR EXPR &key test key at)}
Repeatedly and
@emph{destructively} insert into @samp{VAR} the elements of @samp{EXPR} which are not
already present in @samp{VAR}.

@lisp
;; => (4 1 2 3)
(loopy (list i '((1 2) (2 3) (3 4)))
       (nunion var i))

;; => ((a . 2))
(loopy (array i [((a . 1)) ((a . 2))])
       (nunioning var i :key #'car)
       (finally-return var))

;; => (4 2 (1 1) 3)
(loopy (list i '(((1 1) 2) ((1 1) 3) (3 4)))
       (nunioning var i :test #'equal)
       (finally-return var))

;; => ((1 2 3) (2 3 4))
(loopy (array i [((1 2) (2 3))
                 ((1 2 3) (3 4))])
       (nunion (var1 var2) i :test #'equal))

;; => ((4 2) (1 2) (3 2))
(loopy (list i '(((1 2) (3 2)) ((1 1) (4 2))))
       (nunion i :at start :key #'car))
@end lisp
@end table

@findex prepend
@table @asis
@item @samp{(prepend|prepending VAR EXPR)}
Repeatedly concatenate @samp{EXPR} onto the
front of @samp{VAR}.

This command is equivalent to @samp{(append VAR EXPR :at start)}.  It exists
for clarity and convenience.

@lisp
;; => (5 6 3 4 1 2)
(loopy (array i [(1 2) (3 4) (5 6)])
       (prepend i))

;; => (4 3 2 1)
(let ((my-list '(1)))
  (loopy (without my-list)
         (array elem [(2) (3) (4)])
         (prepend my-list elem)))
@end lisp
@end table

@findex push, push-into
@table @asis
@item @samp{(push|push-into|pushing|pushing-into VAR EXPR)}
Collect the value of
@samp{EXPR} into a list, adding values to the front of @samp{VAR} as if via the
function @code{push}.

This command is equivalent to @samp{(collect VAR EXPR :at start)}.  It exists
for clarity and convenience.

@lisp
;; => (3 2 1)
(loopy (array i [1 2 3])
       (push my-list i))
@end lisp
@end table

@findex reduce
@table @asis
@item @samp{(reduce|reducing VAR EXPR FUNC &key init)}
Reduce @samp{EXPR} into @samp{VAR} via
@samp{FUNC}.  @samp{FUNC} is called with @samp{VAR} as the first argument and @samp{EXPR} as
the second argument.  This is unlike @samp{accumulate}, which gives @samp{VAR} and
@samp{EXPR} to @samp{FUNC} in the opposite order (i.e., @samp{EXPR} first, then @samp{VAR}).

@samp{VAR} is initialized to @samp{INIT}, if provided, or @code{nil}.

@lisp
;; = > 6
(loopy (list i '(1 2 3))
       (reduce my-reduction i #'+ :init 0)
       (finally-return my-reduction))

;; => 24
(loopy (list i '(1 2 3 4))
       (reduce i #'* :init 1))
@end lisp
@end table

@findex sum
@table @asis
@item @samp{(sum|summing VAR EXPR)}
Repeatedly set @samp{VAR} to the sum of the values
of @samp{EXPR} and @samp{VAR}.  @samp{VAR} starts at 0.

@lisp
;; => 10
(loopy (list i '(1 2 3 4))
       (sum my-sum i)
       (finally-return my-sum))
@end lisp
@end table

@findex union
@table @asis
@item @samp{(union|unioning VAR EXPR &key test key at)}
Repeatedly insert into @samp{VAR}
the elements of the list @samp{EXPR} which are not already present in @samp{VAR}.

@lisp
;; => (4 1 2 3)
(loopy (list i '((1 2) (2 3) (3 4)))
       (union var i))

;; => ((a . 2))
(loopy (array i [((a . 1)) ((a . 2))])
       (unioning var i :key #'car)
       (finally-return var))

;; => (4 2 (1 1) 3)
(loopy (list i '(((1 1) 2) ((1 1) 3) (3 4)))
       (unioning var i :test #'equal)
       (finally-return var))

;; => ((1 2 3) (2 3 4))
(loopy (array i [((1 2) (2 3))
                 ((1 2 3) (3 4))])
       (union (var1 var2) i :test #'=)
       (finally-return var1 var2))

;; => ((4 2) (1 2) (3 2))
(loopy (list i '(((1 2) (3 2)) ((1 1) (4 2))))
       (union var i :at 'start :key #'car)
       (finally-return var))
@end lisp
@end table

@findex vconcat
@table @asis
@item @samp{(vconcat|vconcating VAR EXPR)}
Repeatedly concatenate the value of
@samp{EXPR} onto @samp{VAR} via the function @code{vconcat}.

Unlike when using the @samp{:result-type} keyword argument for some other
commands, @samp{VAR} is a vector throughout the loop, not just after the loop
ends.

@lisp
;; => [1 2 3 4 5 6]
(loopy (list i '([1 2 3] [4 5 6]))
       (vconcat my-vector i)
       (finally-return my-vector))

;; => [4 5 6 1 2 3]
(loopy (list i '([1 2 3] [4 5 6]))
       (vconcat i :at 'start))
@end lisp

To concatenate values as strings, see the command @samp{concat} above.
@end table

@node Boolean
@section Boolean

Boolean commands are used to test whether a condition holds true for elements
of a sequence.  Under certain conditions, they cause the loop to exit and
return a value.  Like accumulation commands, they have an implicit return
value which is used if these commands do not cause the loop to exit.

It is incorrect to use both @samp{thereis} and one of @samp{always} or @samp{never} in the
same loop, as this leads to conflicting implicit return values.

For convenience, these commands can be passed multiple conditions.

@findex always
@table @asis
@item @samp{(always COND [CONDS])}
Immediately return @code{nil} if any @samp{COND} is ever
@code{nil}.  Otherwise, the loop returns the final value of the last @samp{COND} or
@code{t} if no @samp{COND} is ever evaluated.

@lisp
;; => t
(loopy (list i '(1 0 1 0 1))
       (always (< i 2)))

;; => nil
(loopy (list i '(1 0 1 0 1))
       (always (< i 1)))

;; => t
(loopy (list i '(1 0 1 0 1))
       ;; Note: can accept multiple conditions.
       ;; This is equivalent to `(always (and (< i 2) (>= i 0)))'.
       (always (< i 2) (>= i 0)))

;; => "hello"
(loopy (list i '(1 1 1 1))
       ;; The return value of `(and (< i 2) "hello")' is "hello".
       (always (< i 2) "hello"))

;; NOTE: Here, the implicit return value is `t' because an
;;       `always' command was used, and that return value
;;       is never updated to "hello" because the `always'
;;       command is never actually used.
;;
;; => t
(loopy (list i '(1 1 1 1))
       (when nil
         (always (> i 5) "hello")))
@end lisp
@end table

@findex never
@table @asis
@item @samp{(never COND [CONDS])}
Immediately return @code{nil} if any @samp{COND} is ever
non-nil.  Otherwise, the loop returns @code{t}.

@lisp
;; => t
(loopy (list i '(1 0 1 0 1))
       (never (= i 3)))

;; => nil
(loopy (list i '(1 0 1 0 1))
       (never (= i 0)))

;; Like `always', `never' can also accept multiple arguments. They are
;; treated as `(never (or COND1 COND2 ... CONDN))'.

;; => t
(loopy (list i '(1 0 1 0 1))
       ;; equivalent to `(never (or (= i 3) (= i 4)))'.
       (never (= i 3) (= i 4)))
@end lisp

@samp{never} does not affect the loop's implicit return value when using the
@samp{always} command.

@lisp
;; This example taken from the documentation of CL's Iterate package.
;;
;; => 2, not t
(loopy (repeat 2)
       (always 2)
       (never nil))
@end lisp
@end table

@findex thereis
@table @asis
@item @samp{(thereis COND [CONDS])}
Immediately return the value of @samp{COND} if said
value is ever non-nil.  Otherwise, the loop returns @code{nil}.  If more than
one condition is specified, then they are treated as one condition joined
by @code{and}.

@lisp
;; => 3
(loopy (list i '(1 0 1 3 1))
       ;; Note: `and' returns the last value it evaluates.
       (thereis (and (> i 2) i)))

;; => nil
(loopy (list i '(1 0 1 0 1))
       (thereis (and (> i 2) i)))

;; => nil
(loopy (list i '(1 0 1 0 1))
       ;; Same as above. Like `always' uses an explicit `and'.
       (thereis (> i 2) i))

;; => 3
(loopy (list i '(nil nil 3 nil))
       (thereis i))
@end lisp
@end table

@node Control Flow
@section Control Flow

@menu
* Conditionals::                 Choosing if commands should run.
* Skipping Cycles::              Immediately beginning the next iteration.
* Early Exit::                   Leaving the loop early, with or without returning values.
@end menu

@node Conditionals
@subsection Conditionals

Conditional commands in @samp{loopy} can take multiple sub-commands, and work
like their Lisp counterparts.  There is therefore no need for an @samp{and}
command as used in @samp{cl-loop}.

@findex when
@table @asis
@item @samp{(when EXPR CMDS)}
Run @samp{CMDS} only if @samp{EXPR} is non-nil.

@lisp
;; Get only the inner lists with all even numbers.
;; => '((2 4 6) (8 10 12) (16 18 20))
(loopy (list i '((2 4 6) (8 10 12) (13 14 15) (16 18 20)))
       (when (loopy (list j i)
                    (when (cl-oddp j)
                      (return nil))
                    (else-do (cl-return t)))
         (collect only-evens i))
       (finally-return only-evens))
@end lisp
@end table

@findex if
@table @asis
@item @samp{(if EXPR CMDS)}
Run the first command if @samp{EXPR} is non-nil.
Otherwise, run the remaining commands.

@lisp
;; => '((7 5 3 1) (6 4 2) (3 3 3))
(loopy (seq i [1 2 3 4 5 6 7])
       (if (cl-oddp i)
           (push-into reversed-odds i)
         (push-into reversed-evens i)
         (push-into some-threes 3))
       (finally-return (list reversed-odds
                             reversed-evens
                             some-threes)))
@end lisp
@end table

@findex cond
@table @asis
@item @samp{(cond [(EXPR CMDS) [...]])}
For the first @samp{EXPR} to evaluate to
non-nil, run the following commands @samp{CMDS}.

@lisp
;; => '((2 4 6) (1 3 5) ("cat" "dog"))
(loopy (list i '(1 2 3 "cat" 4 5 6 "dog"))
       (cond
        ((not (numberp i)) (collect not-numbers i))
        ((cl-evenp i)      (collect evens i))
        (t                 (collect odds i)))
       (finally-return evens odds not-numbers))
@end lisp
@end table

@node Skipping Cycles
@subsection Skipping Cycles

@findex skip, continue
@table @asis
@item @samp{(skip|continue)}
Go to next loop iteration.

@lisp
;; => (2 4 6 8 12 14 16 18)
(loopy (seq i (number-sequence 1 20))
       (when (zerop (mod i 10))
         (skip))
       (when (cl-evenp i)
         (push-into my-collection i))
       (finally-return (nreverse my-collection)))
@end lisp
@end table

@node Early Exit
@subsection Early Exit

The loop is contained in a @samp{cl-block}, and these forms are all variations
of @samp{cl-return-from} underneath.  Indeed, you could use @samp{(do (cl-return-from
    NAME [EXPR]))} to achieve the same effect.

If multiple @samp{EXPR} are passes to the @samp{return} or @samp{return-from}, these
commands will return a list of those @samp{EXPR}.  If not @samp{EXPR} is given, @samp{nil}
is returned.

The commands @samp{leave}, @samp{while}, and @samp{until} leave the current loop without
forcing a returned value.  Unlike the @samp{return} commands, they do not stop
the loop from returning implied return values, such as the collection in
their respective examples.

@findex leave
@table @asis
@item @samp{leave}
Leave the current loop without forcing a return value.

@lisp
;; => (1 2 3 4)
(loopy (list i '(1 2 3 4 5 6 7))
       (if (= i 5)
           (leave)
         (collect i)))
@end lisp
@end table

@findex return loop command
@table @asis
@item @samp{(return [EXPRS])}
Leave the current loop, returning @samp{[EXPRS]}.

@lisp
(loopy (with  (j 0))
       (do (cl-incf j))
       (when (> j 5)
         (return j))) ; => 6
@end lisp
@end table

@findex return-from
@table @asis
@item @samp{(return-from NAME [EXPRS])}
Leave the loop @samp{NAME}, returning @samp{[EXPRS]}.

@lisp
;; => 'bad-val?
(loopy outer-loop
       (list inner-list '((1 2 3) (1 bad-val? 1) (4 5 6)))
       (do (loopy (list i inner-list)
                  (when (eq i 'bad-val?)
                    (return-from outer-loop 'bad-val?)))))
@end lisp
@end table

@findex while
@table @asis
@item @samp{(while COND)}
Leave the loop once @samp{COND} is false, without forcing a
return value.

@lisp
;; => (1 2 3 4)
(loopy (list i '(1 2 3 4 5 6 7))
       (while (not (= i 5)))
       (collect i))
@end lisp
@end table

@findex until
@table @asis
@item @samp{(until COND)}
Leave the loop once @samp{COND} is true, without forcing a
return value.

@lisp
;; => (1 2 3 4)
(loopy (list i '(1 2 3 4 5 6 7))
       (until (= i 5))
       (collect i))
@end lisp
@end table

@node Sub-loops
@section Sub-loops

@findex sub-loop, subloop, loop
@table @asis
@item @samp{(sub-loop|subloop|loop [CMDS])}
Create a sub-loop in the same lexical
environment as the top-level loop.
@end table


There are two main ways to have a sub-loop in @code{loopy}:

@enumerate
@item
Use another @code{loopy} call in a @samp{do} command.
@item
Use the @samp{sub-loop} (aliases @samp{loop} and @samp{subloop}) command.
@end enumerate

@samp{sub-loop} is better for accumulating into variables, as is does not create
its own result variable (unlike calling @code{loopy} again).  When using the
@samp{sub-loop} command, keep in mind the following:

@enumerate
@item
Only loop commands are valid within a sub-loop, not special macro
arguments like @samp{with} or @samp{finally-return}.

@lisp
;; GOOD:
;; => (8 9 10)
(loopy (with (a 7))
       (repeat 1)
       (loop (list i '(1 2 3))
             (collect (+ a i))))

;; BAD:
(loopy (repeat 1)
       (loop (with (a 7))
             (list i '(1 2 3))
             (collect (+ a i))))
@end lisp

@item
Sub-loops can be named, but they do not have their own return value. The
default loop name in @code{loopy} is @code{nil} for the top-level loop, but not for
sub-loops.  To return from the outer loop, you can use @samp{return-from}.

@lisp
;; Return from inner1 so never reach 4.
;; => ((3 5) (3 5))
(loopy (repeat 2)
       (loop inner1
             (list j '(3 4))
             (loop (list k '(5 6 7))
                   (if (= k 6)
                       (return-from inner1)
                     (collect (list j k))))))

;; Can use `return-from' on `nil' to refer to the
;; top-level loop, if un-named. Otherwise use the name.
(loopy (list i '(1 2 3))
       (loop (list j '(5 4 3))
             (if (= i j)
                 (return-from nil i)
               (collect (cons i j)))))
@end lisp

Because there is no return value for sub-loops, the @samp{return} and @samp{leave}
commands behave similarly.

@lisp
;; => ((1 .6) (2 . 6))
(loopy (list i '(1 2))
       (loop (list j '(6 7 8))
             (if (= j 7)
                 (return)
               (collect (cons i j)))))

;; => ((1 .6) (2 . 6))
(loopy (list i '(1 2))
       (loop (list j '(6 7 8))
             (if (= j 7)
                 (leave)
               (collect (cons i j)))))
@end lisp

@item
Variables used for iteration can be local to a sub-loop, but not
variables used for accumulation.

@lisp
;; GOOD:
;; => (0 1 2 3 1 2 3)
(loopy (repeat 2)
       (loop (list i '(1 2 3))
             (collect my-coll i))
       (finally-return (cons 0 my-coll)))

;; BAD:
;; Would not give (0 3 3).  Instead, signals error.
(loopy (repeat 2)
       (loop (list i '(1 2 3)))
       ;; Error:  `i' doesn't exist outside the sub-loop:
       (collect my-coll i)
       (finally-return (cons 0 my-coll)))
@end lisp
@end enumerate

@node Special Variables
@chapter Special Variables

Beyond loop commands, there are a few special variables that one can use
inside of the loop.

@vindex loopy-first-iteration
@table @asis
@item @samp{loopy-first-iteration}
Whether the current loop is in its first
iteration.

@quotation Warning
You should not attempt to set this variable, as it is used by some loop
commands.

@end quotation
@end table

@node The @code{loopy-iter} Macro
@chapter The @code{loopy-iter} Macro

@cindex loopy-iter
@findex loopy-iter
@code{loopy-iter} is a macro that allows for the embedding of loop commands inside
arbitrary code, instead of trying to use the @samp{do} loop command to embed
arbitrary code in a loop.  You must use @code{require} to load this feature.

@quotation Warning
@strong{This feature is still experimental.}  It might not work correctly in all
circumstances.

@end quotation

This macro is meant to be conceptually similar to the @code{iterate} or @code{iter}
macro provided by the Common Lisp package ``Iterate'' @footnote{@uref{https://common-lisp.net/project/iterate/}} (not to be
confused with the @code{iter-*} functions provided by Emacs).

@lisp
(require 'loopy-iter) ; <- Must `require' to load feature.

;; => (2 4 6)
(loopy-iter (for list i '(1 2 3))
            (let ((a (* 2 i)))
              (accum collect a)))
@end lisp

@cindex loopy-iter keywords
@vindex loopy-iter-command-keywords
To clearly distinguish between loop commands and Emacs features (such as the
loop command @samp{list} and the function @code{list}), a loop command must be preceded
by one of the keywords @samp{for}, @samp{accum}, or @samp{exit}.  These keywords do not share
a name with any built-in Emacs feature and are similar to the keywords used by
other packages.

Any keyword in the user option @code{loopy-iter-command-keywords} can be used to
identify any loop command.  For example, @samp{(accum collect a)} and
@samp{(for collect a)} are both valid ways of referring to the @samp{collect} loop
command in @code{loopy-iter}.

To disable this requirement, use the flag @samp{lax-naming} (@ref{Using Flags}).  When
using @samp{lax-naming}, @code{loopy-iter} will always prefer built-in features to loop
commands.  E.g., ``list'' will always be understood as referring to the function
@code{list} and not the loop command @samp{list}.

@vindex loopy-iter-ignored-commands
If for some reason you wish for @code{loopy-iter} to ignore a loop command while
using @samp{lax-naming}, you can add that symbol to @code{loopy-iter-ignored-commands}.

Special macro arguments, already having clearly distinguishable names, do not
need to be preceded by one of the above keywords.  However, some aliases (such
as @samp{let*} for @samp{with}) will not work in @code{loopy-iter}.

@lisp
;; => ((1 8) (2 9) (3 10))
(loopy-iter (with (a 7))                ; <- Set once around loop.
            (for list elem '(1 2 3))
            (let* ((c elem)             ; <- These set inside of loop.
                   (d (+ a c)))
              (accum collect (list c d))))
@end lisp

Restrictions on the placement of loop commands and special macro arguments
still apply in @code{loopy-iter}.  For example, iteration commands must still occur
at the top level of @code{loopy-iter} or a sub-loop.

@lisp
;; BAD
(loopy-iter (let ((a (progn
                       ;; ERROR: `list' must occur at top level.
                       (for list j '(8 9 10 11 12))
                       j)))
              (accum collect a)))

;; GOOD
;; => (8 9 10 11 12)
(loopy-iter (let ((a (progn
                       ;; NOTE: No restriction on placement of `expr'.
                       (for expr j 8 (1+ j))
                       (when (> j 12)
                         ;; Leave loop but don't force return value,
                         ;; allowing implicit result to be returned.
                         (exit leave))
                       j)))
              (accum collect a)))
@end lisp

You should not rely on the values of the code into which loop commands
translate.  For example, the above usage of @samp{expr} might become a @code{setq} form,
but that is an implementation detail and subject to change.  Best practice is
to instead use a variable as the last expression in a @code{progn} form.

For convenience, @code{loopy-iter} will not attempt to interpret loop commands in
quoted code, except in sharp-quoted @code{lambda} forms.  This is because the
@code{lambda} macro is self-quoting, and so Emacs might quote the form before it is
seen by @code{loopy-iter}.

@lisp
;; => (1 2 3)
(loopy-iter (for list elem '(1 2 3))
            (funcall (lambda (x)
                       (accum collect x))
                     elem))

;; => (1 2 3)
(loopy-iter (for list elem '(1 2 3))
            (funcall #'(lambda (x) ; <- sharp-quoted, but still interpreted
                         (accum collect x))
                     elem))
@end lisp

@quotation Note
Nesting arbitrary code in the loop requires knowing how to understand the
code.  You might find cases where @code{loopy-iter} interprets code incorrectly.

Please report such cases on this project's @uref{https://github.com/okamsn/loopy/issues, issues tracker}.

@end quotation

@code{loopy} (and so @code{loopy-iter}) does not currently have all of the features of
Common Lisp's @code{iter} macro.  Think of it more as a way to use loop commands
embedded in arbitrary code.

@node Using Flags
@chapter Using Flags

@cindex flag
A ``flag'' is a symbol passed to the @samp{flag} or @samp{flags} macro argument, and
changes the macro's behavior.  Currently, flags affect what @code{loopy} uses to
perform destructuring (@code{pcase-let}, @code{seq-let}, @samp{dash}, or the default method)
and whether accumulation commands that don't specify a variable (such as
@samp{(collect collect-value)}) accumulate into one or several variables.

Flags are applied in order, so if you specify @samp{(flags seq pcase)} @code{loopy} will
use @code{pcase-let} for destructuring, not @code{seq-let}.

@vindex loopy-default-flags
If you wish to always use a flag, you can add that flag to the list
@code{loopy-default-flags}.  These can be overridden by any flag given in the
@samp{flag} macro argument.

The following flags are currently supported:

@cindex pcase flag
@table @asis
@item @samp{pcase}
Use @code{pcase-let} for destructuring
(@ref{Destructuring with pcase Patterns,,,elisp,}).
@end table
@cindex seq flag
@table @asis
@item @samp{seq}
Use @code{seq-let} for destructuring (@ref{seq-let,,,elisp,}).
@end table
@cindex dash flag
@table @asis
@item @samp{dash}
Use the style of destructuring found in the @samp{dash} library
(@ref{-let,,,dash,}).
@end table
@cindex split flag
@table @asis
@item @samp{split}
Make accumulation commands with implicit variables accumulate into
separate variables instead of into @code{loopy-result}.
@end table
@cindex lax-naming flag
@table @asis
@item @samp{lax-naming}
In @code{loopy-iter}, don't require keywords when using loop
commands (@ref{The @code{loopy-iter} Macro}).
@end table
@cindex default flag
@table @asis
@item @samp{default}
Use the default behavior for all options.
@end table


For convenience, all flags (except @samp{default}) can be undone by prefixing them
with @samp{-} (a dash or minus sign), which reverts @code{loopy} to its default
behavior.

For example, if you have set @code{loopy-default-flags} to @samp{(dash split)} and wish
to only use the @samp{split} flag for a loop, you can use either @samp{(flags default
  split)} or, more simply, @samp{(flag -dash)}.  These prefixed flags only apply when
the unprefixed version is active.  That is, @samp{(flags pcase -dash)} is the same
as just @samp{(flags pcase)}, regardless of the value of @code{loopy-default-flags}, as
@samp{pcase} destructuring will override all uses of @samp{dash} destructuring as it
comes later in the list.  Similarly, @samp{(flags -dash dash)} and @samp{(flags -dash
  +dash)} leave @samp{dash} destructuring enabled, and @samp{(flags +dash -dash)} disables
@samp{dash} destructuring and uses the default behavior.

@cindex loopy-dash
@cindex loopy-pcase
@cindex loopy-seq
The destructuring flags (@samp{pcase}, @samp{seq}, and @samp{dash}) are separate libraries
(respectively, @samp{loopy-pcase}, @samp{loopy-seq}, and @samp{loopy-dash}) that must be
loaded after @samp{loopy}.  Currently, @samp{loopy-dash} is a separate package.

Below are some example of using the destructuring flags.  These flags do not
affect the destructuring of commands using generalized variables (i.e.,
@code{setf}-able places).

@lisp
;; => (((1 (2 3)) (4 (5 6))) ; whole
;;     (1 4)                 ; i
;;     (2 5)                 ; j
;;     (3 6))                ; k
(require 'loopy-dash)
(loopy (flag dash)
       (list elem '((1 (2 3)) (4 (5 6))))
       (collect (whole &as i (j k)) elem))

;; => ((1 4) (3 6))
(require 'loopy-pcase)
(loopy (flag pcase)
       (list elem '((1 (2 3)) (4 (5 6))))
       (collect `(,a (,_ ,b)) elem))

;; => ((1 6) (3 8) ([4 5] [9 10]))
(require 'loopy-seq)
(loopy (flag seq)
       (list elem '([1 2 3 4 5] [6 7 8 9 10]))
       (collect [a _ b &rest c] elem))
@end lisp

The @samp{split} flag can be more efficient than using destructuring with
accumulation commands.  Some accumulation commands can have more efficient
behavior when using implicit accumulation variables, since the variables can't
be accessed until the loop ends.  Using the @samp{split} flag allows you to do this
easily for multiple variables.

This can make a noticeable difference on large lists, but note that if you use
this feature, you will not be able to access the implicit return values with
loopy-result.  They will each have their own, uniquely generated name in
each loop.

@lisp
;; Both of these example give the same result, but the latter
;; can expand into more efficient code.
;;
;; There is also the `push-into' command, which avoids this problem when
;; used with `nreverse'.

;; => ((1 4) (2 5) (3 6))
(loopy (list elem '((1 2 3) (4 5 6)))
       (collect (i j k) elem))

;; => ((1 4) (2 5) (3 6))
(loopy (flag split) ; Don't accumulate into same implicit variable.
       (list (i j k) '((1 2 3) (4 5 6)))
       (collect i)
       (collect j)
       (collect k))
@end lisp

Below is an example of the @samp{split} flag.

@lisp
;; => (1 2 3 4 5)
(loopy (flag -split)
       (list i '(1 2 3 4 5))
       (if (cl-oddp i)
           (collect i)
         (collect i))
       ;; For un-named loops, the variable is `loopy-result'.
       (finally-return loopy-result))

;; => ((1 3 5) (2 4))
(loopy (flag split)
       (list i '(1 2 3 4 5))
       (if (cl-oddp i)
           (collect i)
         (collect i)))
@end lisp

@node Custom Aliases
@chapter Custom Aliases

@cindex custom aliases
An @dfn{alias} is another name for a command.  @code{loopy} comes with several
built-in aliases, such as @samp{set} for the command @samp{expr}.

@vindex loopy-custom-command-aliases
@findex loopy-defalias
Custom aliases can be added to the user option @code{loopy-custom-command-aliases}.
Each element in this list is a pair of the alias and the definition.  For
convenience, the function @code{loopy-defalias} is provided, which will correctly
add the pairs to this variable.

@lisp
;; You don't need to quote either of the arguments,
;; but you can if you prefer.
(loopy-defalias l list)
(loopy-defalias a 'array)

;; => ((1 . 4) (2 . 5) (3 . 6))
(loopy (l i '(1 2 3))
       (a j [4 5 6])
       (collect (cons i j)))

;; => ((a . array) (l . list))
loopy-custom-command-aliases
@end lisp

@quotation Note
The macro checks for command definitions in the following order:

@enumerate
@item
Custom aliases
@item
Custom commands
@item
Built-in commands
@end enumerate


If an alias is found, the macro will check first whether it is an alias of a
custom command, then whether it is an alias of a built-in command.

@end quotation

The special macro arguments (@ref{Special Macro Arguments}) can also be aliased.
Using an alias does not change that the special arguments are parsed before
@code{loopy} attempts to parse loop commands.

@lisp
(loopy-defalias as with)

;; => (8 9 10)
(loopy (as (a 7))
       (list i '(1 2 3))
       (collect (+ i 7)))
@end lisp

@node Custom Commands
@chapter Custom Commands

This section contains information about how loop commands work and how one can
add custom commands to @code{loopy}.  Two examples are provided.

@menu
* Background Info::              The internals of `loopy'.
* Hello World::                  A minimal working example.
* An @code{always} Command::     Adding a feature from `cl-loop'.
* Finding More Examples::
@end menu

@node Background Info
@section Background Info

@cindex instruction, instructions
The core working of @samp{loopy} is taking a command and generating code that is
substituted into or around a loop body.  This code is transmitted between
functions as @dfn{instructions}, which describe how the code is to be
used.

Some examples of instructions are:
@itemize
@item
Declaring a given variable in a let form to make sure it's locally
scoped.
@item
Declaring a generated variable in a let form to contain a given value.
@item
Adding a condition for continuing/exiting the loop.
@item
Adding code to be run during the main loop body.
@item
Adding code to be run after the main loop body.
@end itemize

For example, parsing the command @samp{(list i '(1 2 3))} produces the following
list of instructions.  Some commands require the creation of unique temporary
variables, such as @samp{list-3717} in the below output.

@lisp
((loopy--iteration-vars list-3717 '(1 2 3))
 (loopy--latter-body setq list-3717 (cdr list-3717))
 (loopy--pre-conditions consp list-3717)
 (loopy--main-body setq i (car list-3717))
 (loopy--iteration-vars i nil))
@end lisp

The @code{car} of an instruction is the place to put code and the @code{cdr} of the
instruction is said code to put.  You can see that not all of the code to be
inserted is a valid Lisp form.  Instead of being evaluated as an expression,
some instructions insert pairs of names and values into variable lists like
in @code{let} and @code{let*} .

@multitable {aaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Place
@tab Code
@item @samp{loopy--iteration-vars}
@tab @samp{(list-3717 '(1 2 3))}
@item @samp{loopy--latter-body}
@tab @samp{(setq list-3717 (cdr list-3717))}
@item @samp{loopy--pre-conditions}
@tab @samp{(consp list-3717)}
@item @samp{loopy--main-body}
@tab @samp{(setq i (car list-3717))}
@item @samp{loopy--iteration-vars}
@tab @samp{(i nil)}
@end multitable

Commands are parsed by @samp{loopy--parse-loop-commands}, which receives a list of
commands and returns a list of instructions.  For commands that take
sub-commands as arguments (such as @samp{cond}, @samp{if}, and @samp{when}), more specific
parsing functions are called in a mutually recursive fashion (e.g.,
Function-1 uses Function-2 which uses Function-1, and so on).

For example, consider the function @samp{loopy--parse-if-command}, which parses
the @samp{if} command.  It needs to be able to group any code going to the loop
body under an @code{if}-form.  To do this, it uses @samp{loopy--parse-loop-command} to
turn its sub-commands into a list of instructions, and then checks the @samp{car}
of each instruction to whether the code should be inserted into the loop's
main body (and so whether it should be wrapped in the @code{if}-form).

@lisp
(cl-defun loopy--parse-if-command
    ((_ condition &optional if-true &rest if-false))
  "Parse the `if' loop command.  This takes the entire command.

- CONDITION is a Lisp expression.
- IF-TRUE is the first sub-command of the `if' command.
- IF-FALSE are all the other sub-commands."
  (let (full-instructions
        if-true-main-body
        if-false-main-body)
    (dolist (instruction (loopy--parse-loop-command if-true))
      (if (eq 'loopy--main-body (car instruction))
          (push (cdr instruction) if-true-main-body)
        (push instruction full-instructions)))
    (dolist (instruction (loopy--parse-loop-commands if-false))
      (if (eq 'loopy--main-body (car instruction))
          (push (cdr instruction) if-false-main-body)
        (push instruction full-instructions)))
    ;; Push the actual main-body instruction.
    (setq if-true-main-body
          (if (= 1 (length if-true-main-body))
              (car if-true-main-body)
            (cons 'progn (nreverse if-true-main-body))))

    ;; Return the list of instructions.
    (cons `(loopy--main-body
            . (if ,condition
                  ,if-true-main-body
                ,@@(nreverse if-false-main-body)))
          (nreverse full-instructions))))
@end lisp

The hardest part of this exchange is making sure the inserted code ends up in
the correct order.

A loop body command has 7 main places to put code:

@vindex loopy--generalized-vars
@table @asis
@item @samp{loopy--generalized-vars}
Lists of a symbol and a macro
expansion that will be given to @samp{cl-symbol-macrolet}.  This is used to
create named @code{setf}-able places.  The expansion you use depends on the kind
of sequence and how the it is updated.

For example, @samp{(list-ref i my-list)} declares @samp{i} to be a symbol which
expands to @samp{(car TEMP-VAR)}, in which @samp{TEMP-VAR} holds the value of
@samp{my-list}.  At the end of the loop body, @samp{TEMP-VAR} is set to its @samp{cdr},
ensuring that the next call to @samp{car} returns the correct value.
@end table

@vindex loopy--iteration-vars
@table @asis
@item @samp{loopy--iteration-vars}
Lists of a symbol and an expression that will be
given to @code{let*}.  This is used for initializing variables needed for
iteration commands, such as the @samp{i} in @samp{(list i '(1 2 3))} or to store the
list @samp{'(1 2 3)} in @samp{(list i '(1 2 3))}.  This also includes variables
needed for destructuring.
@end table

@vindex loopy--accumulation-vars
@table @asis
@item @samp{loopy--accumulation-vars}
Lists of a symbol and an expression that will
be given to @code{let*}.  This is used for initializing variables needed for
accumulation commands, such as the @samp{coll} in @samp{(collect coll my-val)} or any
variables needed for destructuring.
@end table

@vindex loopy--pre-conditions
@table @asis
@item @samp{loopy--pre-conditions}
Expressions that determine if the @samp{while}
loop runs/continues, such as whether a list still has elements in it.
If there is more than one expression, than all expressions are used in
an @samp{and} special form.
@end table

@vindex loopy--main-body
@table @asis
@item @samp{loopy--main-body}
Expressions that make up the main body of the
loop.
@end table

@vindex loopy--latter-body
@table @asis
@item @samp{loopy--latter-body}
Expressions that need to be run after the main
body, such as updating some of variables that determine when a loop ends.
@end table

@vindex loopy--post-conditions
@table @asis
@item @samp{loopy--post-conditions}
Expressions that determine whether the
@samp{while} loop continues, but checked after the loop body has run.  The
code from this is ultimately appended to the latter body before being
substituted in.
@end table

For accumulation commands, you might also wish to place values in the
following:

@vindex loopy--implicit-return
@table @asis
@item @samp{loopy--implicit-return}
A list of values to be returned by the loop if
no other return value is specified/reached.  All accumulation commands can
add a value to this list, which can include the variable @code{loopy-result} if
an accumulation command is used without specifying a variable.

For example, @samp{(collect my-collection my-value)} would add @samp{my-collection}
to this list.
@end table

@vindex loopy--implicit-accumulation-final-update
@table @asis
@item @samp{loopy--implicit-accumulation-final-update}
Actions to perform on
@code{loopy-result} after the loop ends.  Some implied accumulation commands
need to update the variable one final time after ending the loop, such as
making sure it is in the right order.  Although this variable is a list of
such updates, to avoid conflicts, only the update at the head of the list
is performed.
@end table

There are 4 more variables a loop command can push to, but they are derived
from the macro's arguments.  Adding to them after using a macro argument
might lead to unintended behavior.  You might wish to use them if, for
example, you are concerned with what happens after the loop exits/completes.

@vindex loopy--before-do
@table @asis
@item @samp{loopy--before-do}
Expressions to evaluate before the loop.  These are
derived from the @samp{before-do} macro argument.
@end table

@vindex loopy--after-do
@table @asis
@item @samp{loopy--after-do}
Expressions to evaluate after the loop completes
successfully.  These are derived from the @samp{after-do} macro argument.
@end table

@vindex loopy--final-do
@table @asis
@item @samp{loopy--final-do}
Expressions to evaluate after the loop completes,
regardless of success.  These are derived from the @samp{finally-do} macro
argument.
@end table

@vindex loopy--final-return
@table @asis
@item @samp{loopy--final-return}
An expression that is always returned by the
macro, regardless of any early returns in the loop body.  This is
derived from the @samp{finally-return} macro argument.
@end table


@vindex loopy--loop-name
Some commands might depend on the name of the loop.  The symbol which names
the loop is stored in the variable @code{loopy--loop-name}.  The default value is
@code{nil} for normal loop and uniquely generated for sub-loops created with the
@samp{sub-loop} command.

The structure of the macro’s expanded code depends on the features used
(e.g., @samp{loopy} won’t try to declare variables if none exist), but the result
will work similar to the below example.

@lisp
`(cl-symbol-macrolet ,loopy--generalized-vars
   (let* ,loopy--with-vars
     (let ,loopy--accumulation-vars
       (let* ,loopy--iteration-vars
         (let ((loopy--early-return-capture
                (cl-block ,loopy--name-arg
                  ,@@loopy--before-do
                  (while ,(cl-case (length loopy--pre-conditions)
                            (0 t)
                            (1 (car loopy--pre-conditions))
                            (t (cons 'and loopy--pre-conditions)))
                    (cl-tagbody
                     ,@@loopy--main-body
                     loopy--continue-tag
                     ,@@loopy--latter-body))
                  ,@@loopy--after-do
                  nil)))
           ,@@loopy--final-do
           ,(if loopy--final-return
                loopy--final-return
              'loopy--early-return-capture))))))
@end lisp

@node Hello World
@section Hello World

To implement a custom loop body command, @samp{loopy} needs two pieces of
information:
@enumerate
@item
The keyword that names your command
@item
The parsing function that can turn uses of your command into instructions.
@end enumerate

Importantly, your custom commands cannot share a name.

For example, say that you're tired of typing out
@samp{(do (message "Hello, %s" first last))} and would prefer to instead use
@samp{(greet FIRST [LAST])}.  This only requires pushing code into the main
loopy body, so the definition of the parsing function is quite simple.

@lisp
(cl-defun my-loopy-greet-command-parser ((_ first &optional last))
  "Greet one with first name FIRST and optional last name LAST."
  `((loopy--main-body . (if ,last
                            (message "Hello, %s %s" ,first ,last)
                          (message "Hello, %s" ,first)))))
@end lisp

@samp{loopy} will pass the entire command expression to the parsing function, and
expects back a list of instructions.

@vindex loopy-custom-command-parsers
To tell @samp{loopy} about this function, add it and the command name @samp{greet} to
the variable @samp{loopy-custom-command-parsers}.  When @code{loopy} doesn’t recognize
a command, it will search in this alist for a matching symbol.  The function
that is paired with the symbol receives the entire command expressions, and
should produce a list of valid instructions.

@lisp
(add-to-list 'loopy-custom-command-parsers
             '(greet . my-loopy-greet-command-parser))
@end lisp

After that, you can use your custom command in the loop body.

@lisp
(loopy (list name '(("John" "Deer") ("Jane" "Doe") ("Jimmy")))
       (greet (car name) (cadr name)))
@end lisp

By running @samp{M-x pp-macroexpand-last-sexp} on the above expression, you can
see that it expands to do what we want, as expected.

@lisp
(let ((g815 '(("John" "Deer")
              ("Jane" "Doe")
              ("Jimmy")))
      (name nil))
  (while (consp g815)
    (setq name (car g815))
    (if (cadr name)
        (message "Hello, %s %s"
                 (car name) (cadr name))
      (message "Hello, %s" (car name)))
    (setq g815 (cdr g815)))
  nil)
@end lisp

@node An @code{always} Command
@section An @code{always} Command

Lets say we want to emulate @code{cl-loop}'s @samp{always} clause, which causes the
loop to return @samp{nil} if an expression evaluates to @samp{nil} and @samp{t} otherwise.
This is similar to the functions @code{cl-every} and @code{seq-every-p}.

Here is an example:

@lisp
;; => t
(cl-loop for i in (number-sequence 1 9) always (< i 10))
@end lisp

Actually, @samp{loopy} already has an @samp{always} command, but for the sake of this
example let's assume that it doesn't.  Without a custom command, you could
translate this using the following code:

@lisp
;; => t
(loopy (list i (number-sequence 1 9))
       (when (< i 10) (return nil))
       (else-do (cl-return t)))
@end lisp

This is similar to what you might write in other languages, such as Python.

@example
# In some testing Python function:
for i in range(1, 10):
    if i < 10:
        return False
else:
    return True
@end example

While the meaning of the code is clear, this approach is certainly wordier.

Here's how one could do this using a custom command.  Again, @samp{loopy} already
comes with a built-in @samp{always} command.  This example is taken directly from
the file @file{loopy-commands.el}, which contains the code of all of
@code{loopy}'s built-in parsers.

We can describe the command's desired behavior in two sentences:
@enumerate
@item
The loop should immediately return @code{nil} if the expression ever evaluates
to @code{nil}.
@item
The loop should return @code{t} if the loop is able to complete successfully.
@end enumerate


This simplest way to satisfy the first requirement is to conditionally use
@code{cl-return} if the expressions ever evaluates to @code{nil}.  We want to do this
while the loop is running, so we should use an instruction for
@code{loopy--main-body}.

@lisp
;; We want to insert the below code into the loop
(when CONDITION
  (cl-return nil))

;; so we use the instruction
`(loopy--main-body . (when ,CONDITION (cl-return nil)))

;; where CONDITION is supplied by the parsing function.
@end lisp

For a simple loop, this works well enough.  However, the function @code{cl-return}
only works with blocks that are named @code{nil}.  If we have named the loop, then
@code{cl-return} won't work, and might instead cause unexpected errors.
Therefore, it is better to use @code{cl-return-from} with the variable
@code{loopy--loop-name}.  As noted in the previous section, @code{loopy--loop-name}
stores the symbol which names the loop.

@lisp
`(loopy--main-body
  . (when ,CONDITION (cl-return-from ,loopy--loop-name nil)))
@end lisp

The best way to satisfy the second requirement is to use an instruction for
@code{loopy--implicit-return}.  One @emph{could} try to insert code using
@code{cl-return-from} into @code{loopy--after-do}, and this @emph{would} cause a value to be
returned after the loop had successfully completed, but doing it that way
could unexpectedly prevent other code in @samp{after-do} from running.  Using an
implicit return value does not have that problem.

This gives us the following instruction, which will add @code{t} to the list of
values the macro returns if nothing else would be returned.  If that list is
just @code{'(t)}, then the macro knows to just return @code{t}.

@lisp
'(loopy--implicit-return . t)
@end lisp

Once we've chosen our instructions, we need to tell @samp{loopy} what function to
use to produce these instructions.  Like in the previous example, we define
are parsing function and add it to the alist @code{loopy-custom-command-parsers}.

@lisp
;; As noted in the previous section, the parsing function is always
;; passed the entire command as `(always CONDTION)', not just the
;; command arguments as `CONDITION'.

(cl-defun my--loopy-always-command-parser ((_ condition))
  "Parse a command of the form `(always CONDITION)'.

If any condition is nil, `loopy' should immediately return nil.
Otherwise, `loopy' should return t."
  `((loopy--implicit-return . t)
    (loopy--main-body . (unless condition
                          (cl-return-from ,loopy--loop-name nil)))))

(add-to-list 'loopy-custom-command-parsers
             (cons 'always #'my--loopy-always-command-parser))
@end lisp

Once we've added our parsing function to @code{loopy-custom-command-parsers},
@samp{loopy} will use that function whenever it tries to understand the @samp{always}
command.  In this case, this custom parser would supercede the built-in
parser.

With that done, our custom @samp{always} command is as useful as the corresponding
@code{cl-loop} clause.  However, because @code{loopy} uses expressions instead of
keyword clauses like @code{cl-loop}, we can do slightly better.  For convenience,
we can easily allow passing multiple conditions to the command instead of
just one.  In such cases, the conditions should be wrapped in an @code{and} form,
and that is indeed what the built-in parser does.

@lisp
;; The built-in parser, taken from `loopy-commands.el':
(cl-defun loopy--parse-always-command ((_ &rest conditions))
  "Parse a command of the form `(always [CONDITIONS])'.

If any condition is nil, `loopy' should immediately return nil.
Otherwise, `loopy' should return t."
  `((loopy--implicit-return . t)
    ;; If there are multiple conditions, wrap these conditions in `and'.
    (loopy--main-body . (unless ,(if (= 1 (length conditions))
                                     (cl-first conditions)
                                   `(and ,@@conditions))
                          (cl-return-from ,loopy--loop-name nil)))))
@end lisp

Here are some examples of the command in action:

@lisp
;; One condition: => t
(loopy (list i (number-sequence 1 9)) (always (< i 10)))

;; Two conditions: => nil
(loopy (list i (number-sequence 1 9))
       (list j '(2 4 6 8 9))
       (always (< i 10) (cl-evenp j)))

;; The previous example is equivalent to this.
(loopy (list i (number-sequence 1 9))
       (list j '(2 4 6 8 9))
       (always (and (< i 10) (cl-evenp j))))
@end lisp

@node Finding More Examples
@section Finding More Examples

If you would like to see more examples, consider reading through the source
code of @file{loopy-commands.el}, which contains the code of all of the
built-in loop commands.  You can easily find this file using
@kbd{M-x find-library loopy-commands RET}.

@node Comparing to @code{cl-loop}
@chapter Comparing to @code{cl-loop}

@samp{loopy} should be comparable with @samp{cl-loop} for most things, keeping in
mind the following:
@itemize
@item
It is probably less efficient than @samp{cl-loop}, though I am so far trying to
keep the same logic that @samp{cl-loop} uses.
@item
It has more flexible control-flow commands, under which you can easily group
sub-commands, including assignments.
@item
It has a @samp{skip} command to skip the rest of the loop body and immediately
start the next iteration.  Of course, a similar effect could be achieved
using the @samp{when} or @samp{unless} commands.
@end itemize

@samp{loopy} is not always one-to-one replacement for @samp{cl-loop}, but it is easy to
use and extend, and performs well in the cases that it already handles.

Below is a simple example of @samp{loopy} vs @samp{cl-loop}.

@lisp
(require 'cl-lib)
(cl-loop with some-thing = 5
         for i from 1 to 100
         do (message "I is %s" i)
         when (> (+ i 5) 20)
         return (format "Done: %d" i))

(require 'loopy)
(loopy (with (some-thing 5))
       (list i (number-sequence 1 100))
       (do (message "I is %s" i))
       (when (> (+ i 5) 20)
         (return (format "Done: %d" i))))
@end lisp

The main benefit (I believe) of Loopy is clearer grouping of commands under
conditionals while still using a clean syntax, such as in the below example.

@lisp
;; => '((2 4) (4 8) (6 12) (8 16) (10 20))
(loopy (list i (number-sequence 1 10))
       (when (cl-evenp i)
         (expr once i)
         (expr twice (* 2 i))
         (collect together (list once twice)))
       (finally-return together))
@end lisp

In my experience, @samp{cl-loop} does not allow the easy grouping of assignment
statements under a @samp{when} condition.  For example, below is something I would
like to try to do with @samp{cl-loop}.

I am aware that in this example the @samp{for} statements aren't necessary and that
the @samp{collect} statements would be sufficient, but (when I come across things
like this in my work) I would like to use them to declare variables for
readability purposes.

@lisp
(require 'cl-lib)
(save-match-data
  (cl-loop with pattern = "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)"
           for line in (split-string "Line1-Data1\nBad\nLine2-Data2")
           when (string-match pattern line)
           for line-num = (concat "L" (match-string 1 line))
           and for data-num = (concat "D" (match-string 2 line))

           ;; … Further processing now that data is named …

           and collect line-num into line-nums
           and collect data-num into data-nums
           finally return (list line-nums data-nums)))

;; Normal Elisp:
(save-match-data
  (let ((pattern "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)")
        (line-nums)
        (data-nums))
    (dolist (line (split-string "Line1-Data1\nBad\nLine2-Data2"))
      (when (string-match pattern line)
        (let ((line-num (concat "L" (match-string 1 line)))
              (datum-num (concat "D" (match-string 2 line))))

          ;; … Further processing now that data is named …

          (push line-num line-nums)
          (push datum-num data-nums))))
    (list (nreverse line-nums) (nreverse data-nums))))
@end lisp

Here is how one could currently do it with @samp{loopy}:

@lisp
(require 'loopy)
(save-match-data
  (loopy (with (pattern "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)"))
         (list line (split-string "Line1-Data1\nBad\nLine2-Data2"))
         (when (string-match pattern line)
           (expr line-num (concat "L" (match-string 1 line)))
           (expr datum-num (concat "D" (match-string 2 line)))

           ;; … Further processing now that data is named …

           (collect line-nums line-num)
           (collect data-nums datum-num))
         (finally-return line-nums data-nums)))
@end lisp

I believe that the value of the macro increases for longer loop bodies with
several conditional commands.

Another nice ability, one that I'm not sure @samp{cl-loop} has, is a specific
command for skipping/continuing a loop iteration.  Of course, one could also
re-organize code under a conditional command like @samp{when} to achieve the same
effect.

@lisp
;; Returns even numbers that aren't multiples of 10.
(loopy (list i (number-sequence 1 20))
       (when (zerop (mod i 10))
         (skip))
       (when (cl-evenp i)
         (push-into my-collection i))
       (finally-return (nreverse my-collection))) ; => (2 4 6 8 12 14 16 18)
@end lisp

@node Translating @samp{cl-loop}
@chapter Translating @samp{cl-loop}

@code{loopy} and @code{cl-loop} use slightly different terminology.  The equivalent of
``for clauses'' are referred to as ``iteration commands'' in @code{loopy}, as they
generally are used for iterating through sequences.  Meanwhile, ``iteration
clauses'' can be separated into ``iteration commands'' (@samp{repeat} and @samp{iter-by}
(not yet implemented)) and ``early-exit commands'' (@samp{while} and @samp{until}).

``Accumulation clauses'' work the same as ``accumulation commands''.

@menu
* For Clauses::
* Iteration Clauses::
* Accumulation Clauses::
* Other Clauses::
@end menu

@node For Clauses
@section For Clauses

As Emacs has many functions that return lists, there is no need to implement
an exact equivalent for every @samp{for}-clause that @samp{cl-loop} has.  Instead, one
can just iterate through the return value of the appropriate function using
the @samp{list} command.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @code{cl-loop}
@tab @code{loopy}
@item @samp{for VAR from EXPR1 to EXPR2 by EXPR3}
@tab @samp{(list VAR (number-sequence EXPR1 EXPR2 EXPR3))}
@item @samp{for VAR in LIST [by FUNCTION]}
@tab @samp{(list VAR LIST [FUNC])}
@item @samp{for VAR on LIST [by FUNCTION]}
@tab @samp{(cons VAR VAL [FUNC])}
@item @samp{for VAR in-ref LIST by FUNCTION}
@tab @samp{(list-ref VAR LIST [FUNC])}
@item @samp{for VAR across ARRAY}
@tab @samp{(array VAR ARRAY)}
@item @samp{for VAR across-ref ARRAY}
@tab @samp{(array-ref VAR ARRAY)}
@item @samp{for VAR being the elements of SEQUENCE}
@tab @samp{(seq VAR SEQUENCE)}
@item @samp{for VAR being the elements of-ref SEQUENCE}
@tab @samp{(seq-ref VAR SEQUENCE)}
@item @samp{for VAR being the symbols [of OBARRAY]}
@tab None so far.  Use @code{mapatoms}.
@item @samp{for VAR being the hash-keys of HASH-TABLE}
@tab @samp{(list VAR (hash-table-keys HASH-TABLE))}
@item @samp{for VAR being the hash-values of HASH-TABLE}
@tab @samp{(list VAR (hash-table-values HASH-TABLE))}
@item @samp{for VAR being the key-codes of KEYMAP}
@tab None so far.  Use @code{map-keymap}.
@item @samp{for VAR being the key-bindings of KEYMAP}
@tab None so far.  Use @code{map-keymap}.
@item @samp{for VAR being the key-seqs of KEYMAP}
@tab None so far.
@item @samp{for VAR being the overlays [of BUFFER]}
@tab None so far.  Use @code{overlay-lists}.
@item @samp{for VAR being the intervals [of BUFFER]}
@tab None so far.
@item @samp{for VAR being the frames}
@tab @samp{(list VAR (frame-list))}
@item @samp{for VAR being the windows [of FRAME]}
@tab @samp{(list VAR (window-list FRAME))}
@item @samp{for VAR being the buffers}
@tab @samp{(list VAR (buffer-list))}
@item @samp{for VAR = EXPR1 then EXPR2}
@tab @samp{(expr VAR EXPR1 EXPR2)}
@end multitable

@node Iteration Clauses
@section Iteration Clauses

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa}
@headitem @code{cl-loop}
@tab @code{loopy}
@item @samp{repeat INT}
@tab @samp{(repeat INT)}
@item @samp{while COND}
@tab @samp{(while COND)}
@item @samp{until COND}
@tab @samp{(until COND)}
@item @samp{iter-by iterator}
@tab None so far.
@item @samp{never}
@tab @samp{(never COND)}
@item @samp{always}
@tab @samp{(always COND)}
@item @samp{thereis}
@tab @samp{(thereis COND)}
@end multitable

@node Accumulation Clauses
@section Accumulation Clauses

Like with @code{cl-loop}, in @code{loopy}, accumulation commands accumulate into the
same variable when no @samp{VAR} is given (by default, @code{loopy-result}).  If you
would like accumulation commands to accumulate into separate variables,
simple provide @samp{VAR} to the command or use the @samp{split} flag (@ref{Using Flags}).

@multitable {aaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaa}
@headitem @code{cl-loop}
@tab @code{loopy}
@item @samp{append EXPR into VAR}
@tab @samp{(append VAR EXPR)}
@item @samp{collect EXPR into VAR}
@tab @samp{(collect VAR EXPR)}
@item @samp{concat EXPR into VAR}
@tab @samp{(concat VAR EXPR)}
@item @samp{count EXPR into VAR}
@tab @samp{(count VAR EXPR)}
@item @samp{maximize EXPR into VAR}
@tab @samp{(max VAR EXPR)}
@item @samp{minimize EXPR into VAR}
@tab @samp{(min VAR EXPR)}
@item @samp{nconc EXPR into VAR}
@tab @samp{(nconc VAR EXPR)}
@item @samp{sum EXPR into VAR}
@tab @samp{(sum VAR EXPR)}
@item @samp{vconcat EXPR into VAR}
@tab @samp{(vconcat VAR EXPR)}
@end multitable

@node Other Clauses
@section Other Clauses

In @code{loopy}, @samp{if}, @samp{when}, and @samp{unless} can take multiple loop commands as
arguments, and operate more like their Lisp counterparts.

This means that @samp{if} is not a synonym for @samp{when}.  Just like the normal Lisp
special form @code{if}, @samp{(if COND cmd1 cmd2 cmd3)} only runs @samp{cmd1} if @samp{COND}
evaluates to non-nil, and only runs commands @samp{cmd2} and @samp{cmd3} if @samp{COND}
evaluates to @code{nil}.

@code{loopy} also provides the command @samp{cond}, which works like the normal Lisp
special form @code{cond}.

@multitable {aaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @samp{cl-loop}
@tab @samp{loopy}
@item @samp{with var = value}
@tab @samp{(with (VAR VALUE))} as a macro argument
@item @samp{if COND clause}
@tab @samp{(if COND CMDS)} as a loop command
@item @samp{when COND clause}
@tab @samp{(when COND CMDS)} as a loop command
@item @samp{unless COND clause}
@tab @samp{(unless COND CMDS)} as a loop command
@item @samp{named NAME}
@tab @samp{NAME} as a macro argument
@item @samp{initially [do] EXPRS}
@tab @samp{(before-do EXPRS)} as a macro argument
@item @samp{finally [do] EXPRS}
@tab @samp{(finally-do EXPRS)} as a macro argument
@item @samp{finally return EXPR}
@tab @samp{(finally-return EXPR)} as a macro argument
@item @samp{do EXPRS}
@tab @samp{(do EXPRS)} as a loop command
@item @samp{return EXPR}
@tab @samp{(return EXPR)} as a loop command
@end multitable

@node Real-World Examples
@chapter Real-World Examples

This section contains examples of loops that exist in real-world commands.  To
see these loops in context, full examples of those commands can be found in
the file @uref{loopy-examples.el} (containing the library @samp{loopy-examples}) that
comes with this package.

One command that could see a benefit from using @samp{loopy} is @samp{selectrum-swiper}
from the Selectrum wiki @footnote{@uref{https://github.com/raxod502/selectrum/wiki/Useful-Commands#swiper-like-jumping-to-matching-lines}}.  This command allows a user to jump to
a matched line in the buffer.  Candidates are created by looping through text
lines, formatting non-empty lines and collecting the formatted lines into a
list of candidates.  At the same time, it selects a default candidate by
finding the non-empty line closest to the current line.

Here is the main portion of the command, which uses @samp{cl-loop}.

@lisp
;; ...
(cl-loop
 with buffer-lines = (split-string (buffer-string) "\n")
 with number-format = (concat "L%0"
                              (number-to-string
                               (length (number-to-string
                                        (length buffer-lines))))
                              "d: ")

 with formatted-candidates = nil
 for line-text in buffer-lines
 for line-num = (line-number-at-pos (point-min) t) then (1+ line-num)

 with default-candidate = nil
 with prev-distance-to-default-cand = 1.0e+INF ; This updated later.
 for distance-to-default-cand = (abs (- current-line-number line-num))

 unless (string-empty-p line-text)      ; Just skip empty lines.
 do
 ;; Find if we’ve started to move away from the current line.
 (when (null default-candidate)
   (when (> distance-to-default-cand
            prev-distance-to-default-cand)
     (setq default-candidate (cl-first formatted-candidates)))
   (setq prev-distance-to-default-cand distance-to-default-cand))

 ;; Format current line and collect candidate.
 (push (propertize line-text
                   'selectrum-candidate-display-prefix
                   (propertize (format number-format line-num)
                               'face 'completions-annotations)
                   'line-num line-num)
       formatted-candidates)

 finally return (list default-candidate
                      (nreverse formatted-candidates)))
;; ...
@end lisp

The limitations of @samp{cl-loop}'s @samp{when} clause encourages relying on Lisp
expressions rather than clauses for processing.  To use those Lisp
expressions, one must declare more variables with the @samp{with} clause to ensure
that those variables are locally scoped.

Here is how it could be done with @samp{loopy}:

@lisp
;; ...
(loopy
 (with (buffer-text-lines (split-string (buffer-string) "\n"))
       (number-format (concat "L%0"
                              (number-to-string
                               (length (number-to-string
                                        (length buffer-text-lines))))
                              "d: ")))
 (list line-text buffer-text-lines)
 (expr line-num (line-number-at-pos (point-min) t)
       (1+ line-num))
 (unless (string-empty-p line-text)
   (push-into formatted-candidates
              (propertize line-text
                          'selectrum-candidate-display-prefix
                          (propertize (format number-format line-num)
                                      'face 'completions-annotations)
                          'line-num line-num))
   ;; There are a few different ways that you could express
   ;; this.
   (when (null default-candidate)
     (expr prev-dist +1.0e+INF dist-to-default-cand)
     (expr dist-to-default-cand (abs (- current-line-number
                                        line-num)))
     (when (> dist-to-default-cand prev-dist)
       (expr default-candidate (cl-second formatted-candidates)))))
 (finally-return default-candidate (nreverse formatted-candidates)))
;; ...
@end lisp

We can see that most of the loop commands are easily grouped under the
@samp{unless} command.  This allows for less noise, as we do not need to declare
variables or fall back to using more Lisp expressions.

Another good example is the command @samp{selectrum-outline} from the same page.
This command is similar to @samp{selectrum-swiper}, but has a slightly more
complicated processing portion.

The code loops through each line in the buffer, searching for lines that match
a pre-determined regular expression.  The match data is used to determine the
heading level (top level, second level, etc.) and the actual heading text.
The loop produces formatted candidates by prepending this heading text with
the text of parent headings, as determined by the heading level.  At the same
time, the loop selects the current heading as the default candidate.

Instead of using @samp{cl-loop}, this command is written in conventional Emacs
Lisp.

@lisp
;; ...
(let (;; Get the basic information of each heading in the accessible
      ;; portion of the buffer.
      (buffer-lines (split-string (buffer-string) "\n"))
      (line-number 0)
      (line-number-format)

      ;; Finding the default heading
      (default-heading)
      (current-line-number (line-number-at-pos (point)))

      ;; Keeping track of the tree.
      (backwards-prefix-list)
      (prev-heading-text)
      (prev-heading-level)

      ;; Backwards result of the ‘dolist'. Will ‘nreverse’.
      (formatted-headings))

  (setq line-number-format
        (concat "L%0"
                (number-to-string
                 (length (number-to-string (length buffer-lines))))
                "d: "))

  (save-match-data
    (dolist (text-line buffer-lines)
      ;; Increment line number when moving to next.
      (cl-incf line-number)
      (when (string-match heading-regexp text-line)
        (let ((heading-text (match-string-no-properties 2 text-line))
              (heading-level
               (length (match-string-no-properties 1 text-line))))

          ;; Make sure this has a valid value when we first compare.  The
          ;; first comparison should be equal, so that nothing is
          ;; needlessly added to the prefix list, which causes bad
          ;; formatting.
          (unless prev-heading-level
            (setq prev-heading-level heading-level))

          ;; Decide whether to update the prefix list and the previous
          ;; heading level.
          (cond
           ;; If we've moved to a greater level (further down the tree),
           ;; add the previous heading to the heading prefix list so
           ;; that we can prepend it to the current heading when
           ;; formatting.
           ((> heading-level prev-heading-level)
            (setq backwards-prefix-list (cons prev-heading-text
                                              backwards-prefix-list)
                  prev-heading-level heading-level))
           ;; Otherwise, if we've moved to a lower level (higher up the
           ;; tree), and need to remove the most recently added prefix
           ;; from the list (i.e., go from '(c b a) back to '(b a)).
           ((< heading-level prev-heading-level)
            (setq backwards-prefix-list (last backwards-prefix-list
                                              heading-level)
                  prev-heading-level heading-level)))

          ;; Regardless of what happens, update the previous heading text.
          (setq prev-heading-text heading-text)

          ;; Decide whether the previous formatted heading was the
          ;; default.
          (when (and (null default-heading)
                     (> line-number current-line-number))
            (setq default-heading (cl-first formatted-headings)))

          ;; Finally, add to list of formatted headings.
          ;; Create heading of form "L#: a/b/c" as:
          ;; - having a text property holding the line number
          ;; - prepended with a formatted line number,
          ;;   with the face ‘completions-annotations’.
          (push (propertize
                 (concat (string-join (reverse backwards-prefix-list) "/")
                         (and backwards-prefix-list "/")
                         heading-text)
                 'line-number line-number
                 'selectrum-candidate-display-prefix
                 (propertize
                  (format line-number-format line-number)
                  'face 'completions-annotations))
                formatted-headings)))))
  ;; ...
  )
@end lisp

Here is a version in @samp{loopy} which is more of a straight translation than a
re-working:

@lisp
;; ...
(loopy
 (with (buffer-lines (split-string (buffer-string) "\n"))
       (line-number-format
        (concat "L%0"
                (number-to-string
                 (length (number-to-string (length buffer-lines))))
                "d: ")))
 (expr line-number 1 (1+ line-number))
 (list text-line buffer-lines)
 (when (string-match heading-regexp text-line)
   (expr heading-text
         (match-string-no-properties 2 text-line))
   (expr heading-level
         (length (match-string-no-properties 1 text-line)))

   ;; Decide whether to update the prefix list and the previous
   ;; heading level.
   (cond
    ;; If we've moved to a greater level (further down the tree),
    ;; add the previous heading to the heading prefix list so that
    ;; we can prepend it to the current heading when formatting.
    ((> heading-level (or prev-heading-level heading-level))

     (push-into backwards-prefix-list prev-heading-text)
     (expr prev-heading-level heading-level))
    ;; Otherwise, if we've moved to a lower level (higher up the
    ;; tree), and need to remove the most recently added prefix
    ;; from the list (i.e., go from '(c b a) back to '(b a)).
    ((< heading-level (or prev-heading-level heading-level))
     (expr backwards-prefix-list (last backwards-prefix-list
                                       heading-level))
     (expr prev-heading-level heading-level)))

   ;; Regardless of what happens, update the previous heading
   ;; text.
   (expr prev-heading-text heading-text)

   ;; Decide whether the previous formatted heading was the
   ;; default.
   (when (and (null default-heading)
              (> line-number current-line-number))
     (expr default-heading (car formatted-headings)))

   ;; Finally, add to list of formatted headings.
   ;; Create heading of form "L#: a/b/c" as:
   ;; - having a text property holding the line number
   ;; - prepended with a formatted line number,
   ;;   with the face ‘completions-annotations’.
   (push-into
    formatted-headings
    (propertize
     (concat (string-join
              (reverse backwards-prefix-list) "/")
             (and backwards-prefix-list "/")
             heading-text)
     'line-number line-number
     'selectrum-candidate-display-prefix
     (propertize (format line-number-format line-number)
                 'face 'completions-annotations))))
 (finally-return default-heading (nreverse formatted-headings)))
;; ...
@end lisp

In my opinion, the @samp{loopy} version is a bit cleaner.  Even when following the
same flow of logic, you still get the benefit of less typing with no loss in
clarity.

If one were writing code like this often (say, in a library), then the loop
body could be simplified even further with custom commands
(@ref{Custom Commands}).

@node Macro Argument and Loop Command Index
@chapter Macro Argument and Loop Command Index

@printindex fn

@node Variable Index
@chapter Variable Index

@printindex vr

@node Concept Index
@chapter Concept Index

@printindex cp

@bye